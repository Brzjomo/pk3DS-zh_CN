/*----------------------------------------------------------------------------*/
/*--  This program is free software: you can redistribute it and/or modify  --*/
/*--  it under the terms of the GNU General Public License as published by  --*/
/*--  the Free Software Foundation, either version 3 of the License, or     --*/
/*--  (at your option) any later version.                                   --*/
/*--                                                                        --*/
/*--  This program is distributed in the hope that it will be useful,       --*/
/*--  but WITHOUT ANY WARRANTY; without even the implied warranty of        --*/
/*--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          --*/
/*--  GNU General Public License for more details.                          --*/
/*--                                                                        --*/
/*--  You should have received a copy of the GNU General Public License     --*/
/*--  along with this program. If not, see <http://www.gnu.org/licenses/>.  --*/
/*----------------------------------------------------------------------------*/

using pk3DS.Core;
using pk3DS.Core.CTR;
using pk3DS.Core.Structures.PersonalInfo;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Threading.Tasks;
using System.Net.Http;
using HtmlDocument = HtmlAgilityPack.HtmlDocument;
using System.Diagnostics;
using System.Reflection;
using MethodInvoker = System.Windows.Forms.MethodInvoker;
using System.Data.SQLite;

namespace pk3DS.WinForms
{
    public sealed partial class Main : Form
    {
        public Main()
        {
            // Initialize the Main Form
            InitializeComponent();

            UpdateProgramTitle();

            // Prepare DragDrop Functionality
            AllowDrop = TB_Path.AllowDrop = true;
            DragEnter += TabMain_DragEnter;
            DragDrop += TabMain_DragDrop;
            TB_Path.DragEnter += TabMain_DragEnter;
            TB_Path.DragDrop += TabMain_DragDrop;
            foreach (var t in TC_RomFS.TabPages.OfType<TabPage>())
            {
                t.AllowDrop = true;
                t.DragEnter += TabMain_DragEnter;
                t.DragDrop += TabMain_DragDrop;
            }

            // Reload Previous Editing Files if the file exists
            var settings = Properties.Settings.Default;
            CB_Lang.SelectedIndex = settings.Language;
            var path = settings.GamePath;
            if (!string.IsNullOrWhiteSpace(path))
            {
                try
                {
                    OpenQuick(path);
                }
                catch (Exception ex)
                {
                    WinFormsUtil.Error($"无法自动加载先前打开的ROM转储，位于 -- {path}.", ex.Message);
                    ResetStatus();
                }
            }

            string[] args = Environment.GetCommandLineArgs();
            string filename = args.Length > 0 ? Path.GetFileNameWithoutExtension(args[0])?.ToLower() : "";
            skipBoth = filename.IndexOf("3DSkip", StringComparison.Ordinal) >= 0;

            var randset = RandSettings.FileName;
            if (File.Exists(randset))
                RandSettings.Load(File.ReadAllLines(randset));

            ChangeLanguage();

            ExtractSQLiteFile(pokeDB);

            // CheckForUpdate
            Load += async (sender, e) => await CheckForUpdate();

            //MessageBox.Show(pokeDBPath, "Debug", MessageBoxButtons.OK, MessageBoxIcon.None);
        }

        internal static GameConfig Config;
        public static string RomFSPath;
        public static string ExeFSPath;
        public static string ExHeaderPath;
        private static string OfficialBuild = "1040";
        private static string Version = "55"; //提交计数
        private static bool versionCheckFailed = false;
        private static bool ifVersionChecked = false;
        private static bool ifUpToDate = false;
        public static int[] latestVersions = [0, 0];
        private volatile int threads;
        internal static volatile int Language;
        internal static SMDH SMDH;
        private uint HANSgameID; // for exporting RomFS/ExeFS with correct X8 gameID
        private readonly bool skipBoth;
        public static PersonalInfo[] SpeciesStat => Config.Personal.Table;
        public static bool ifFixChineseDisplay = false;
        public readonly static string pokeDB = "PokeDB.sqlite";
        public static string pokeDBPath = string.Empty;
        public readonly static string DBPokeTable = "pokedata";
        public readonly static string DBMegaTable = "pokeMegadata";
        public static List<PokeData> pokeList = [];
        public static List<PokeData> megaPokeList = [];

        public static void ExtractSQLiteFile(string fileName)
        {
            string currentNamespace = typeof(Main).Namespace;
            string tempPath = Path.Combine(Path.GetTempPath(), fileName);

            using (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(currentNamespace+ "." + fileName))
            {
                using (FileStream fileStream = new FileStream(tempPath, FileMode.Create))
                {
                    stream.CopyTo(fileStream);
                }
            }

            pokeDBPath = tempPath;
        }

        // 宝可梦中文名称
        public static readonly string[] pokemonNameUSSC =
        {
            "妙蛙种子 - 001",
            "妙蛙草 - 002",
            "妙蛙花 - 003",
            "小火龙 - 004",
            "火恐龙 - 005",
            "喷火龙 - 006",
            "杰尼龟 - 007",
            "卡咪龟 - 008",
            "水箭龟 - 009",
            "绿毛虫 - 010",
            "铁甲蛹 - 011",
            "巴大蝶 - 012",
            "独角虫 - 013",
            "铁壳蛹 - 014",
            "大针蜂 - 015",
            "波波 - 016",
            "比比鸟 - 017",
            "大比鸟 - 018",
            "小拉达 - 019",
            "拉达 - 020",
            "烈雀 - 021",
            "大嘴雀 - 022",
            "阿柏蛇 - 023",
            "阿柏怪 - 024",
            "皮卡丘 - 025",
            "雷丘 - 026",
            "穿山鼠 - 027",
            "穿山王 - 028",
            "尼多兰 - 029",
            "尼多娜 - 030",
            "尼多后 - 031",
            "尼多朗 - 032",
            "尼多力诺 - 033",
            "尼多王 - 034",
            "皮皮 - 035",
            "皮可西 - 036",
            "六尾 - 037",
            "九尾 - 038",
            "胖丁 - 039",
            "胖可丁 - 040",
            "超音蝠 - 041",
            "大嘴蝠 - 042",
            "走路草 - 043",
            "臭臭花 - 044",
            "霸王花 - 045",
            "派拉斯 - 046",
            "派拉斯特 - 047",
            "毛球 - 048",
            "摩鲁蛾 - 049",
            "地鼠 - 050",
            "三地鼠 - 051",
            "喵喵 - 052",
            "猫老大 - 053",
            "可达鸭 - 054",
            "哥达鸭 - 055",
            "猴怪 - 056",
            "火暴猴 - 057",
            "卡蒂狗 - 058",
            "风速狗 - 059",
            "蚊香蝌蚪 - 060",
            "蚊香君 - 061",
            "蚊香泳士 - 062",
            "凯西 - 063",
            "勇基拉 - 064",
            "胡地 - 065",
            "腕力 - 066",
            "豪力 - 067",
            "怪力 - 068",
            "喇叭芽 - 069",
            "口呆花 - 070",
            "大食花 - 071",
            "玛瑙水母 - 072",
            "毒刺水母 - 073",
            "小拳石 - 074",
            "隆隆石 - 075",
            "隆隆岩 - 076",
            "小火马 - 077",
            "烈焰马 - 078",
            "呆呆兽 - 079",
            "呆壳兽 - 080",
            "小磁怪 - 081",
            "三合一磁怪 - 082",
            "大葱鸭 - 083",
            "嘟嘟 - 084",
            "嘟嘟利 - 085",
            "小海狮 - 086",
            "白海狮 - 087",
            "臭泥 - 088",
            "臭臭泥 - 089",
            "大舌贝 - 090",
            "刺甲贝 - 091",
            "鬼斯 - 092",
            "鬼斯通 - 093",
            "耿鬼 - 094",
            "大岩蛇 - 095",
            "催眠貘 - 096",
            "引梦貘人 - 097",
            "大钳蟹 - 098",
            "巨钳蟹 - 099",
            "霹雳电球 - 100",
            "顽皮雷弹 - 101",
            "蛋蛋 - 102",
            "椰蛋树 - 103",
            "卡拉卡拉 - 104",
            "嘎啦嘎啦 - 105",
            "飞腿郎 - 106",
            "快拳郎 - 107",
            "大舌头 - 108",
            "瓦斯弹 - 109",
            "双弹瓦斯 - 110",
            "独角犀牛 - 111",
            "钻角犀兽 - 112",
            "吉利蛋 - 113",
            "蔓藤怪 - 114",
            "袋兽 - 115",
            "墨海马 - 116",
            "海刺龙 - 117",
            "角金鱼 - 118",
            "金鱼王 - 119",
            "海星星 - 120",
            "宝石海星 - 121",
            "魔墙人偶 - 122",
            "飞天螳螂 - 123",
            "迷唇姐 - 124",
            "电击兽 - 125",
            "鸭嘴火兽 - 126",
            "凯罗斯 - 127",
            "肯泰罗 - 128",
            "鲤鱼王 - 129",
            "暴鲤龙 - 130",
            "拉普拉斯 - 131",
            "百变怪 - 132",
            "伊布 - 133",
            "水伊布 - 134",
            "雷伊布 - 135",
            "火伊布 - 136",
            "多边兽 - 137",
            "菊石兽 - 138",
            "多刺菊石兽 - 139",
            "化石盔 - 140",
            "镰刀盔 - 141",
            "化石翼龙 - 142",
            "卡比兽 - 143",
            "急冻鸟 - 144",
            "闪电鸟 - 145",
            "火焰鸟 - 146",
            "迷你龙 - 147",
            "哈克龙 - 148",
            "快龙 - 149",
            "超梦 - 150",
            "梦幻 - 151",
            "菊草叶 - 152",
            "月桂叶 - 153",
            "大竺葵 - 154",
            "火球鼠 - 155",
            "火岩鼠 - 156",
            "火暴兽 - 157",
            "小锯鳄 - 158",
            "蓝鳄 - 159",
            "大力鳄 - 160",
            "尾立 - 161",
            "大尾立 - 162",
            "咕咕 - 163",
            "猫头夜鹰 - 164",
            "芭瓢虫 - 165",
            "安瓢虫 - 166",
            "圆丝蛛 - 167",
            "阿利多斯 - 168",
            "叉字蝠 - 169",
            "灯笼鱼 - 170",
            "电灯怪 - 171",
            "皮丘 - 172",
            "皮宝宝 - 173",
            "宝宝丁 - 174",
            "波克比 - 175",
            "波克基古 - 176",
            "天然雀 - 177",
            "天然鸟 - 178",
            "咩利羊 - 179",
            "茸茸羊 - 180",
            "电龙 - 181",
            "美丽花 - 182",
            "玛力露 - 183",
            "玛力露丽 - 184",
            "树才怪 - 185",
            "蚊香蛙皇 - 186",
            "毽子草 - 187",
            "毽子花 - 188",
            "毽子棉 - 189",
            "长尾怪手 - 190",
            "向日种子 - 191",
            "向日花怪 - 192",
            "蜻蜻蜓 - 193",
            "乌波 - 194",
            "沼王 - 195",
            "太阳伊布 - 196",
            "月亮伊布 - 197",
            "黑暗鸦 - 198",
            "呆呆王 - 199",
            "梦妖 - 200",
            "未知图腾 - 201",
            "果然翁 - 202",
            "麒麟奇 - 203",
            "榛果球 - 204",
            "佛烈托斯 - 205",
            "土龙弟弟 - 206",
            "天蝎 - 207",
            "大钢蛇 - 208",
            "布鲁 - 209",
            "布鲁皇 - 210",
            "千针鱼 - 211",
            "巨钳螳螂 - 212",
            "壶壶 - 213",
            "赫拉克罗斯 - 214",
            "狃拉 - 215",
            "熊宝宝 - 216",
            "圈圈熊 - 217",
            "熔岩虫 - 218",
            "熔岩蜗牛 - 219",
            "小山猪 - 220",
            "长毛猪 - 221",
            "太阳珊瑚 - 222",
            "铁炮鱼 - 223",
            "章鱼桶 - 224",
            "信使鸟 - 225",
            "巨翅飞鱼 - 226",
            "盔甲鸟 - 227",
            "戴鲁比 - 228",
            "黑鲁加 - 229",
            "刺龙王 - 230",
            "小小象 - 231",
            "顿甲 - 232",
            "多边兽２型 - 233",
            "惊角鹿 - 234",
            "图图犬 - 235",
            "无畏小子 - 236",
            "战舞郎 - 237",
            "迷唇娃 - 238",
            "电击怪 - 239",
            "鸭嘴宝宝 - 240",
            "大奶罐 - 241",
            "幸福蛋 - 242",
            "雷公 - 243",
            "炎帝 - 244",
            "水君 - 245",
            "幼基拉斯 - 246",
            "沙基拉斯 - 247",
            "班基拉斯 - 248",
            "洛奇亚 - 249",
            "凤王 - 250",
            "时拉比 - 251",
            "木守宫 - 252",
            "森林蜥蜴 - 253",
            "蜥蜴王 - 254",
            "火稚鸡 - 255",
            "力壮鸡 - 256",
            "火焰鸡 - 257",
            "水跃鱼 - 258",
            "沼跃鱼 - 259",
            "巨沼怪 - 260",
            "土狼犬 - 261",
            "大狼犬 - 262",
            "蛇纹熊 - 263",
            "直冲熊 - 264",
            "刺尾虫 - 265",
            "甲壳茧 - 266",
            "狩猎凤蝶 - 267",
            "盾甲茧 - 268",
            "毒粉蛾 - 269",
            "莲叶童子 - 270",
            "莲帽小童 - 271",
            "乐天河童 - 272",
            "橡实果 - 273",
            "长鼻叶 - 274",
            "狡猾天狗 - 275",
            "傲骨燕 - 276",
            "大王燕 - 277",
            "长翅鸥 - 278",
            "大嘴鸥 - 279",
            "拉鲁拉丝 - 280",
            "奇鲁莉安 - 281",
            "沙奈朵 - 282",
            "溜溜糖球 - 283",
            "雨翅蛾 - 284",
            "蘑蘑菇 - 285",
            "斗笠菇 - 286",
            "懒人獭 - 287",
            "过动猿 - 288",
            "请假王 - 289",
            "土居忍士 - 290",
            "铁面忍者 - 291",
            "脱壳忍者 - 292",
            "咕妞妞 - 293",
            "吼爆弹 - 294",
            "爆音怪 - 295",
            "幕下力士 - 296",
            "铁掌力士 - 297",
            "露力丽 - 298",
            "朝北鼻 - 299",
            "向尾喵 - 300",
            "优雅猫 - 301",
            "勾魂眼 - 302",
            "大嘴娃 - 303",
            "可可多拉 - 304",
            "可多拉 - 305",
            "波士可多拉 - 306",
            "玛沙那 - 307",
            "恰雷姆 - 308",
            "落雷兽 - 309",
            "雷电兽 - 310",
            "正电拍拍 - 311",
            "负电拍拍 - 312",
            "电萤虫 - 313",
            "甜甜萤 - 314",
            "毒蔷薇 - 315",
            "溶食兽 - 316",
            "吞食兽 - 317",
            "利牙鱼 - 318",
            "巨牙鲨 - 319",
            "吼吼鲸 - 320",
            "吼鲸王 - 321",
            "呆火驼 - 322",
            "喷火驼 - 323",
            "煤炭龟 - 324",
            "跳跳猪 - 325",
            "噗噗猪 - 326",
            "晃晃斑 - 327",
            "大颚蚁 - 328",
            "超音波幼虫 - 329",
            "沙漠蜻蜓 - 330",
            "刺球仙人掌 - 331",
            "梦歌仙人掌 - 332",
            "青绵鸟 - 333",
            "七夕青鸟 - 334",
            "猫鼬斩 - 335",
            "饭匙蛇 - 336",
            "月石 - 337",
            "太阳岩 - 338",
            "泥泥鳅 - 339",
            "鲶鱼王 - 340",
            "龙虾小兵 - 341",
            "铁螯龙虾 - 342",
            "天秤偶 - 343",
            "念力土偶 - 344",
            "触手百合 - 345",
            "摇篮百合 - 346",
            "太古羽虫 - 347",
            "太古盔甲 - 348",
            "丑丑鱼 - 349",
            "美纳斯 - 350",
            "飘浮泡泡 - 351",
            "变隐龙 - 352",
            "怨影娃娃 - 353",
            "诅咒娃娃 - 354",
            "夜巡灵 - 355",
            "彷徨夜灵 - 356",
            "热带龙 - 357",
            "风铃铃 - 358",
            "阿勃梭鲁 - 359",
            "小果然 - 360",
            "雪童子 - 361",
            "冰鬼护 - 362",
            "海豹球 - 363",
            "海魔狮 - 364",
            "帝牙海狮 - 365",
            "珍珠贝 - 366",
            "猎斑鱼 - 367",
            "樱花鱼 - 368",
            "古空棘鱼 - 369",
            "爱心鱼 - 370",
            "宝贝龙 - 371",
            "甲壳龙 - 372",
            "暴飞龙 - 373",
            "铁哑铃 - 374",
            "金属怪 - 375",
            "巨金怪 - 376",
            "雷吉洛克 - 377",
            "雷吉艾斯 - 378",
            "雷吉斯奇鲁 - 379",
            "拉帝亚斯 - 380",
            "拉帝欧斯 - 381",
            "盖欧卡 - 382",
            "固拉多 - 383",
            "烈空坐 - 384",
            "基拉祈 - 385",
            "代欧奇希斯 - 386",
            "草苗龟 - 387",
            "树林龟 - 388",
            "土台龟 - 389",
            "小火焰猴 - 390",
            "猛火猴 - 391",
            "烈焰猴 - 392",
            "波加曼 - 393",
            "波皇子 - 394",
            "帝王拿波 - 395",
            "姆克儿 - 396",
            "姆克鸟 - 397",
            "姆克鹰 - 398",
            "大牙狸 - 399",
            "大尾狸 - 400",
            "圆法师 - 401",
            "音箱蟀 - 402",
            "小猫怪 - 403",
            "勒克猫 - 404",
            "伦琴猫 - 405",
            "含羞苞 - 406",
            "罗丝雷朵 - 407",
            "头盖龙 - 408",
            "战槌龙 - 409",
            "盾甲龙 - 410",
            "护城龙 - 411",
            "结草儿 - 412",
            "结草贵妇 - 413",
            "绅士蛾 - 414",
            "三蜜蜂 - 415",
            "蜂女王 - 416",
            "帕奇利兹 - 417",
            "泳圈鼬 - 418",
            "浮潜鼬 - 419",
            "樱花宝 - 420",
            "樱花儿 - 421",
            "无壳海兔 - 422",
            "海兔兽 - 423",
            "双尾怪手 - 424",
            "飘飘球 - 425",
            "随风球 - 426",
            "卷卷耳 - 427",
            "长耳兔 - 428",
            "梦妖魔 - 429",
            "乌鸦头头 - 430",
            "魅力喵 - 431",
            "东施喵 - 432",
            "铃铛响 - 433",
            "臭鼬噗 - 434",
            "坦克臭鼬 - 435",
            "铜镜怪 - 436",
            "青铜钟 - 437",
            "盆才怪 - 438",
            "魔尼尼 - 439",
            "小福蛋 - 440",
            "聒噪鸟 - 441",
            "花岩怪 - 442",
            "圆陆鲨 - 443",
            "尖牙陆鲨 - 444",
            "烈咬陆鲨 - 445",
            "小卡比兽 - 446",
            "利欧路 - 447",
            "路卡利欧 - 448",
            "沙河马 - 449",
            "河马兽 - 450",
            "钳尾蝎 - 451",
            "龙王蝎 - 452",
            "不良蛙 - 453",
            "毒骷蛙 - 454",
            "尖牙笼 - 455",
            "荧光鱼 - 456",
            "霓虹鱼 - 457",
            "小球飞鱼 - 458",
            "雪笠怪 - 459",
            "暴雪王 - 460",
            "玛狃拉 - 461",
            "自爆磁怪 - 462",
            "大舌舔 - 463",
            "超甲狂犀 - 464",
            "巨蔓藤 - 465",
            "电击魔兽 - 466",
            "鸭嘴炎兽 - 467",
            "波克基斯 - 468",
            "远古巨蜓 - 469",
            "叶伊布 - 470",
            "冰伊布 - 471",
            "天蝎王 - 472",
            "象牙猪 - 473",
            "多边兽乙型 - 474",
            "艾路雷朵 - 475",
            "大朝北鼻 - 476",
            "黑夜魔灵 - 477",
            "雪妖女 - 478",
            "洛托姆 - 479",
            "由克希 - 480",
            "艾姆利多 - 481",
            "亚克诺姆 - 482",
            "帝牙卢卡 - 483",
            "帕路奇亚 - 484",
            "席多蓝恩 - 485",
            "雷吉奇卡斯 - 486",
            "骑拉帝纳 - 487",
            "克雷色利亚 - 488",
            "霏欧纳 - 489",
            "玛纳霏 - 490",
            "达克莱伊 - 491",
            "谢米 - 492",
            "阿尔宙斯 - 493",
            "比克提尼 - 494",
            "藤藤蛇 - 495",
            "青藤蛇 - 496",
            "君主蛇 - 497",
            "暖暖猪 - 498",
            "炒炒猪 - 499",
            "炎武王 - 500",
            "水水獭 - 501",
            "双刃丸 - 502",
            "大剑鬼 - 503",
            "探探鼠 - 504",
            "步哨鼠 - 505",
            "小约克 - 506",
            "哈约克 - 507",
            "长毛狗 - 508",
            "扒手猫 - 509",
            "酷豹 - 510",
            "花椰猴 - 511",
            "花椰猿 - 512",
            "爆香猴 - 513",
            "爆香猿 - 514",
            "冷水猴 - 515",
            "冷水猿 - 516",
            "食梦梦 - 517",
            "梦梦蚀 - 518",
            "豆豆鸽 - 519",
            "咕咕鸽 - 520",
            "高傲雉鸡 - 521",
            "斑斑马 - 522",
            "雷电斑马 - 523",
            "石丸子 - 524",
            "地幔岩 - 525",
            "庞岩怪 - 526",
            "滚滚蝙蝠 - 527",
            "心蝙蝠 - 528",
            "螺钉地鼠 - 529",
            "龙头地鼠 - 530",
            "差不多娃娃 - 531",
            "搬运小匠 - 532",
            "铁骨土人 - 533",
            "修建老匠 - 534",
            "圆蝌蚪 - 535",
            "蓝蟾蜍 - 536",
            "蟾蜍王 - 537",
            "投摔鬼 - 538",
            "打击鬼 - 539",
            "虫宝包 - 540",
            "宝包茧 - 541",
            "保姆虫 - 542",
            "百足蜈蚣 - 543",
            "车轮球 - 544",
            "蜈蚣王 - 545",
            "木棉球 - 546",
            "风妖精 - 547",
            "百合根娃娃 - 548",
            "裙儿小姐 - 549",
            "野蛮鲈鱼 - 550",
            "黑眼鳄 - 551",
            "混混鳄 - 552",
            "流氓鳄 - 553",
            "火红不倒翁 - 554",
            "达摩狒狒 - 555",
            "沙铃仙人掌 - 556",
            "石居蟹 - 557",
            "岩殿居蟹 - 558",
            "滑滑小子 - 559",
            "头巾混混 - 560",
            "象征鸟 - 561",
            "哭哭面具 - 562",
            "迭失棺 - 563",
            "原盖海龟 - 564",
            "肋骨海龟 - 565",
            "始祖小鸟 - 566",
            "始祖大鸟 - 567",
            "破破袋 - 568",
            "灰尘山 - 569",
            "索罗亚 - 570",
            "索罗亚克 - 571",
            "泡沫栗鼠 - 572",
            "奇诺栗鼠 - 573",
            "哥德宝宝 - 574",
            "哥德小童 - 575",
            "哥德小姐 - 576",
            "单卵细胞球 - 577",
            "双卵细胞球 - 578",
            "人造细胞卵 - 579",
            "鸭宝宝 - 580",
            "舞天鹅 - 581",
            "迷你冰 - 582",
            "多多冰 - 583",
            "双倍多多冰 - 584",
            "四季鹿 - 585",
            "萌芽鹿 - 586",
            "电飞鼠 - 587",
            "盖盖虫 - 588",
            "骑士蜗牛 - 589",
            "哎呀球菇 - 590",
            "败露球菇 - 591",
            "轻飘飘 - 592",
            "胖嘟嘟 - 593",
            "保姆曼波 - 594",
            "电电虫 - 595",
            "电蜘蛛 - 596",
            "种子铁球 - 597",
            "坚果哑铃 - 598",
            "齿轮儿 - 599",
            "齿轮组 - 600",
            "齿轮怪 - 601",
            "麻麻小鱼 - 602",
            "麻麻鳗 - 603",
            "麻麻鳗鱼王 - 604",
            "小灰怪 - 605",
            "大宇怪 - 606",
            "烛光灵 - 607",
            "灯火幽灵 - 608",
            "水晶灯火灵 - 609",
            "牙牙 - 610",
            "斧牙龙 - 611",
            "双斧战龙 - 612",
            "喷嚏熊 - 613",
            "冻原熊 - 614",
            "几何雪花 - 615",
            "小嘴蜗 - 616",
            "敏捷虫 - 617",
            "泥巴鱼 - 618",
            "功夫鼬 - 619",
            "师父鼬 - 620",
            "赤面龙 - 621",
            "泥偶小人 - 622",
            "泥偶巨人 - 623",
            "驹刀小兵 - 624",
            "劈斩司令 - 625",
            "爆炸头水牛 - 626",
            "毛头小鹰 - 627",
            "勇士雄鹰 - 628",
            "秃鹰丫头 - 629",
            "秃鹰娜 - 630",
            "熔蚁兽 - 631",
            "铁蚁 - 632",
            "单首龙 - 633",
            "双首暴龙 - 634",
            "三首恶龙 - 635",
            "燃烧虫 - 636",
            "火神蛾 - 637",
            "勾帕路翁 - 638",
            "代拉基翁 - 639",
            "毕力吉翁 - 640",
            "龙卷云 - 641",
            "雷电云 - 642",
            "莱希拉姆 - 643",
            "捷克罗姆 - 644",
            "土地云 - 645",
            "酋雷姆 - 646",
            "凯路迪欧 - 647",
            "美洛耶塔 - 648",
            "盖诺赛克特 - 649",
            "哈力栗 - 650",
            "胖胖哈力 - 651",
            "布里卡隆 - 652",
            "火狐狸 - 653",
            "长尾火狐 - 654",
            "妖火红狐 - 655",
            "呱呱泡蛙 - 656",
            "呱头蛙 - 657",
            "甲贺忍蛙 - 658",
            "掘掘兔 - 659",
            "掘地兔 - 660",
            "小箭雀 - 661",
            "火箭雀 - 662",
            "烈箭鹰 - 663",
            "粉蝶虫 - 664",
            "粉蝶蛹 - 665",
            "彩粉蝶 - 666",
            "小狮狮 - 667",
            "火炎狮 - 668",
            "花蓓蓓 - 669",
            "花叶蒂 - 670",
            "花洁夫人 - 671",
            "坐骑小羊 - 672",
            "坐骑山羊 - 673",
            "顽皮熊猫 - 674",
            "霸道熊猫 - 675",
            "多丽米亚 - 676",
            "妙喵 - 677",
            "超能妙喵 - 678",
            "独剑鞘 - 679",
            "双剑鞘 - 680",
            "坚盾剑怪 - 681",
            "粉香香 - 682",
            "芳香精 - 683",
            "绵绵泡芙 - 684",
            "胖甜妮 - 685",
            "好啦鱿 - 686",
            "乌贼王 - 687",
            "龟脚脚 - 688",
            "龟足巨铠 - 689",
            "垃垃藻 - 690",
            "毒藻龙 - 691",
            "铁臂枪虾 - 692",
            "钢炮臂虾 - 693",
            "伞电蜥 - 694",
            "光电伞蜥 - 695",
            "宝宝暴龙 - 696",
            "怪颚龙 - 697",
            "冰雪龙 - 698",
            "冰雪巨龙 - 699",
            "仙子伊布 - 700",
            "摔角鹰人 - 701",
            "咚咚鼠 - 702",
            "小碎钻 - 703",
            "黏黏宝 - 704",
            "黏美儿 - 705",
            "黏美龙 - 706",
            "钥圈儿 - 707",
            "小木灵 - 708",
            "朽木妖 - 709",
            "南瓜精 - 710",
            "南瓜怪人 - 711",
            "冰宝 - 712",
            "冰岩怪 - 713",
            "嗡蝠 - 714",
            "音波龙 - 715",
            "哲尔尼亚斯 - 716",
            "伊裴尔塔尔 - 717",
            "基格尔德 - 718",
            "蒂安希 - 719",
            "胡帕 - 720",
            "波尔凯尼恩 - 721",
            "木木枭 - 722",
            "投羽枭 - 723",
            "狙射树枭 - 724",
            "火斑喵 - 725",
            "炎热喵 - 726",
            "炽焰咆哮虎 - 727",
            "球球海狮 - 728",
            "花漾海狮 - 729",
            "西狮海壬 - 730",
            "小笃儿 - 731",
            "喇叭啄鸟 - 732",
            "铳嘴大鸟 - 733",
            "猫鼬少 - 734",
            "猫鼬探长 - 735",
            "强颚鸡母虫 - 736",
            "虫电宝 - 737",
            "锹农炮虫 - 738",
            "好胜蟹 - 739",
            "好胜毛蟹 - 740",
            "花舞鸟 - 741",
            "萌虻 - 742",
            "蝶结萌虻 - 743",
            "岩狗狗 - 744",
            "鬃岩狼人 - 745",
            "弱丁鱼 - 746",
            "好坏星 - 747",
            "超坏星 - 748",
            "泥驴仔 - 749",
            "重泥挽马 - 750",
            "滴蛛 - 751",
            "滴蛛霸 - 752",
            "伪螳草 - 753",
            "兰螳花 - 754",
            "睡睡菇 - 755",
            "灯罩夜菇 - 756",
            "夜盗火蜥 - 757",
            "焰后蜥 - 758",
            "童偶熊 - 759",
            "穿着熊 - 760",
            "甜竹竹 - 761",
            "甜舞妮 - 762",
            "甜冷美后 - 763",
            "花疗环环 - 764",
            "智挥猩 - 765",
            "投掷猴 - 766",
            "胆小虫 - 767",
            "具甲武者 - 768",
            "沙丘娃 - 769",
            "噬沙堡爷 - 770",
            "拳海参 - 771",
            "属性：空 - 772",
            "银伴战兽 - 773",
            "小陨星 - 774",
            "树枕尾熊 - 775",
            "爆焰龟兽 - 776",
            "托戈德玛尔 - 777",
            "谜拟丘 - 778",
            "磨牙彩皮鱼 - 779",
            "老翁龙 - 780",
            "破破舵轮 - 781",
            "心鳞宝 - 782",
            "鳞甲龙 - 783",
            "杖尾鳞甲龙 - 784",
            "卡璞・鸣鸣 - 785",
            "卡璞・蝶蝶 - 786",
            "卡璞・哞哞 - 787",
            "卡璞・鳍鳍 - 788",
            "科斯莫古 - 789",
            "科斯莫姆 - 790",
            "索尔迦雷欧 - 791",
            "露奈雅拉 - 792",
            "虚吾伊德 - 793",
            "爆肌蚊 - 794",
            "费洛美螂 - 795",
            "电束木 - 796",
            "铁火辉夜 - 797",
            "纸御剑 - 798",
            "恶食大王 - 799",
            "奈克洛兹玛 - 800",
            "玛机雅娜 - 801",
            "玛夏多 - 802",
            "毒贝比 - 803",
            "四颚针龙 - 804",
            "垒磊石 - 805",
            "砰头小丑 - 806",
            "捷拉奥拉 - 807",
            "代欧奇希斯 1 - 808",
            "代欧奇希斯 2 - 809",
            "代欧奇希斯 3 - 810",
            "结草贵妇 1 - 811",
            "结草贵妇 2 - 812",
            "谢米 1 - 813",
            "骑拉帝纳 1 - 814",
            "洛托姆 1 - 815",
            "洛托姆 2 - 816",
            "洛托姆 3 - 817",
            "洛托姆 4 - 818",
            "洛托姆 5 - 819",
            "飘浮泡泡 1 - 820",
            "飘浮泡泡 2 - 821",
            "飘浮泡泡 3 - 822",
            "樱花儿 1 - 823",
            "无壳海兔 1 - 824",
            "海兔兽 1 - 825",
            "野蛮鲈鱼 1 - 826",
            "达摩狒狒 1 - 827",
            "美洛耶塔 1 - 828",
            "酋雷姆 1 - 829",
            "酋雷姆 2 - 830",
            "凯路迪欧 1 - 831",
            "龙卷云 1 - 832",
            "雷电云 1 - 833",
            "土地云 1 - 834",
            "耿鬼 1 - 835",
            "超能妙喵 1 - 836",
            "多丽米亚 1 - 837",
            "多丽米亚 2 - 838",
            "多丽米亚 3 - 839",
            "多丽米亚 4 - 840",
            "多丽米亚 5 - 841",
            "多丽米亚 6 - 842",
            "多丽米亚 7 - 843",
            "多丽米亚 8 - 844",
            "多丽米亚 9 - 845",
            "沙奈朵 1 - 846",
            "电龙 1 - 847",
            "妙蛙花 1 - 848",
            "喷火龙 1 - 849",
            "喷火龙 2 - 850",
            "超梦 1 - 851",
            "超梦 2 - 852",
            "火焰鸡 1 - 853",
            "恰雷姆 1 - 854",
            "黑鲁加 1 - 855",
            "波士可多拉 1 - 856",
            "诅咒娃娃 1 - 857",
            "班基拉斯 1 - 858",
            "巨钳螳螂 1 - 859",
            "凯罗斯 1 - 860",
            "化石翼龙 1 - 861",
            "路卡利欧 1 - 862",
            "暴雪王 1 - 863",
            "坚盾剑怪 1 - 864",
            "水箭龟 1 - 865",
            "袋兽 1 - 866",
            "暴鲤龙 1 - 867",
            "阿勃梭鲁 1 - 868",
            "胡地 1 - 869",
            "赫拉克罗斯 1 - 870",
            "大嘴娃 1 - 871",
            "雷电兽 1 - 872",
            "烈咬陆鲨 1 - 873",
            "拉帝欧斯 1 - 874",
            "拉帝亚斯 1 - 875",
            "南瓜精 1 - 876",
            "南瓜精 2 - 877",
            "南瓜精 3 - 878",
            "南瓜怪人 1 - 879",
            "南瓜怪人 2 - 880",
            "南瓜怪人 3 - 881",
            "花叶蒂 1 - 882",
            "花叶蒂 2 - 883",
            "花叶蒂 3 - 884",
            "花叶蒂 4 - 885",
            "花叶蒂 5 - 886",
            "巨沼怪 1 - 887",
            "蜥蜴王 1 - 888",
            "勾魂眼 1 - 889",
            "七夕青鸟 1 - 890",
            "艾路雷朵 1 - 891",
            "差不多娃娃 1 - 892",
            "巨牙鲨 1 - 893",
            "呆壳兽 1 - 894",
            "大钢蛇 1 - 895",
            "大比鸟 1 - 896",
            "冰鬼护 1 - 897",
            "蒂安希 1 - 898",
            "巨金怪 1 - 899",
            "盖欧卡 1 - 900",
            "固拉多 1 - 901",
            "烈空坐 1 - 902",
            "胡帕 1 - 903",
            "喷火驼 1 - 904",
            "长耳兔 1 - 905",
            "暴飞龙 1 - 906",
            "大针蜂 1 - 907",
            "弱丁鱼 1 - 908",
            "花舞鸟 1 - 909",
            "花舞鸟 2 - 910",
            "花舞鸟 3 - 911",
            "鬃岩狼人 1 - 912",
            "鬃岩狼人 2 - 913",
            "小拉达 1 - 914",
            "拉达 1 - 915",
            "拉达 2 - 916",
            "雷丘 1 - 917",
            "穿山鼠 1 - 918",
            "穿山王 1 - 919",
            "六尾 1 - 920",
            "九尾 1 - 921",
            "喵喵 1 - 922",
            "猫老大 1 - 923",
            "小拳石 1 - 924",
            "隆隆石 1 - 925",
            "隆隆岩 1 - 926",
            "臭泥 1 - 927",
            "臭臭泥 1 - 928",
            "椰蛋树 1 - 929",
            "嘎啦嘎啦 1 - 930",
            "嘎啦嘎啦 2 - 931",
            "甲贺忍蛙 1 - 932",
            "甲贺忍蛙 2 - 933",
            "基格尔德 1 - 934",
            "基格尔德 2 - 935",
            "基格尔德 3 - 936",
            "基格尔德 4 - 937",
            "小陨星 1 - 938",
            "小陨星 2 - 939",
            "小陨星 3 - 940",
            "小陨星 4 - 941",
            "小陨星 5 - 942",
            "小陨星 6 - 943",
            "小陨星 7 - 944",
            "小陨星 8 - 945",
            "小陨星 9 - 946",
            "小陨星 10 - 947",
            "小陨星 11 - 948",
            "小陨星 12 - 949",
            "小陨星 13 - 950",
            "地鼠 1 - 951",
            "三地鼠 1 - 952",
            "谜拟丘 1 - 953",
            "谜拟丘 2 - 954",
            "谜拟丘 3 - 955",
            "玛机雅娜 1 - 956",
            "皮卡丘 1 - 957",
            "皮卡丘 2 - 958",
            "皮卡丘 3 - 959",
            "皮卡丘 4 - 960",
            "皮卡丘 5 - 961",
            "皮卡丘 6 - 962",
            "皮卡丘 7 - 963",
            "猫鼬探长 1 - 964",
            "锹农炮虫 1 - 965",
            "兰螳花 1 - 966",
            "焰后蜥 1 - 967",
            "杖尾鳞甲龙 1 - 968",
            "奈克洛兹玛 1 - 969",
            "奈克洛兹玛 2 - 970",
            "奈克洛兹玛 3 - 971",
            "滴蛛霸 1 - 972",
            "托戈德玛尔 1 - 973",
            "蝶结萌虻 1 - 974",
            "岩狗狗 1 - 975"
        };

        public static readonly string[] pokemonNameUSSC_Sim =
        {
            "妙蛙种子",
            "妙蛙草",
            "妙蛙花",
            "小火龙",
            "火恐龙",
            "喷火龙",
            "杰尼龟",
            "卡咪龟",
            "水箭龟",
            "绿毛虫",
            "铁甲蛹",
            "巴大蝶",
            "独角虫",
            "铁壳蛹",
            "大针蜂",
            "波波",
            "比比鸟",
            "大比鸟",
            "小拉达",
            "拉达",
            "烈雀",
            "大嘴雀",
            "阿柏蛇",
            "阿柏怪",
            "皮卡丘",
            "雷丘",
            "穿山鼠",
            "穿山王",
            "尼多兰",
            "尼多娜",
            "尼多后",
            "尼多朗",
            "尼多力诺",
            "尼多王",
            "皮皮",
            "皮可西",
            "六尾",
            "九尾",
            "胖丁",
            "胖可丁",
            "超音蝠",
            "大嘴蝠",
            "走路草",
            "臭臭花",
            "霸王花",
            "派拉斯",
            "派拉斯特",
            "毛球",
            "摩鲁蛾",
            "地鼠",
            "三地鼠",
            "喵喵",
            "猫老大",
            "可达鸭",
            "哥达鸭",
            "猴怪",
            "火暴猴",
            "卡蒂狗",
            "风速狗",
            "蚊香蝌蚪",
            "蚊香君",
            "蚊香泳士",
            "凯西",
            "勇基拉",
            "胡地",
            "腕力",
            "豪力",
            "怪力",
            "喇叭芽",
            "口呆花",
            "大食花",
            "玛瑙水母",
            "毒刺水母",
            "小拳石",
            "隆隆石",
            "隆隆岩",
            "小火马",
            "烈焰马",
            "呆呆兽",
            "呆壳兽",
            "小磁怪",
            "三合一磁怪",
            "大葱鸭",
            "嘟嘟",
            "嘟嘟利",
            "小海狮",
            "白海狮",
            "臭泥",
            "臭臭泥",
            "大舌贝",
            "刺甲贝",
            "鬼斯",
            "鬼斯通",
            "耿鬼",
            "大岩蛇",
            "催眠貘",
            "引梦貘人",
            "大钳蟹",
            "巨钳蟹",
            "霹雳电球",
            "顽皮雷弹",
            "蛋蛋",
            "椰蛋树",
            "卡拉卡拉",
            "嘎啦嘎啦",
            "飞腿郎",
            "快拳郎",
            "大舌头",
            "瓦斯弹",
            "双弹瓦斯",
            "独角犀牛",
            "钻角犀兽",
            "吉利蛋",
            "蔓藤怪",
            "袋兽",
            "墨海马",
            "海刺龙",
            "角金鱼",
            "金鱼王",
            "海星星",
            "宝石海星",
            "魔墙人偶",
            "飞天螳螂",
            "迷唇姐",
            "电击兽",
            "鸭嘴火兽",
            "凯罗斯",
            "肯泰罗",
            "鲤鱼王",
            "暴鲤龙",
            "拉普拉斯",
            "百变怪",
            "伊布",
            "水伊布",
            "雷伊布",
            "火伊布",
            "多边兽",
            "菊石兽",
            "多刺菊石兽",
            "化石盔",
            "镰刀盔",
            "化石翼龙",
            "卡比兽",
            "急冻鸟",
            "闪电鸟",
            "火焰鸟",
            "迷你龙",
            "哈克龙",
            "快龙",
            "超梦",
            "梦幻",
            "菊草叶",
            "月桂叶",
            "大竺葵",
            "火球鼠",
            "火岩鼠",
            "火暴兽",
            "小锯鳄",
            "蓝鳄",
            "大力鳄",
            "尾立",
            "大尾立",
            "咕咕",
            "猫头夜鹰",
            "芭瓢虫",
            "安瓢虫",
            "圆丝蛛",
            "阿利多斯",
            "叉字蝠",
            "灯笼鱼",
            "电灯怪",
            "皮丘",
            "皮宝宝",
            "宝宝丁",
            "波克比",
            "波克基古",
            "天然雀",
            "天然鸟",
            "咩利羊",
            "茸茸羊",
            "电龙",
            "美丽花",
            "玛力露",
            "玛力露丽",
            "树才怪",
            "蚊香蛙皇",
            "毽子草",
            "毽子花",
            "毽子棉",
            "长尾怪手",
            "向日种子",
            "向日花怪",
            "蜻蜻蜓",
            "乌波",
            "沼王",
            "太阳伊布",
            "月亮伊布",
            "黑暗鸦",
            "呆呆王",
            "梦妖",
            "未知图腾",
            "果然翁",
            "麒麟奇",
            "榛果球",
            "佛烈托斯",
            "土龙弟弟",
            "天蝎",
            "大钢蛇",
            "布鲁",
            "布鲁皇",
            "千针鱼",
            "巨钳螳螂",
            "壶壶",
            "赫拉克罗斯",
            "狃拉",
            "熊宝宝",
            "圈圈熊",
            "熔岩虫",
            "熔岩蜗牛",
            "小山猪",
            "长毛猪",
            "太阳珊瑚",
            "铁炮鱼",
            "章鱼桶",
            "信使鸟",
            "巨翅飞鱼",
            "盔甲鸟",
            "戴鲁比",
            "黑鲁加",
            "刺龙王",
            "小小象",
            "顿甲",
            "多边兽２型",
            "惊角鹿",
            "图图犬",
            "无畏小子",
            "战舞郎",
            "迷唇娃",
            "电击怪",
            "鸭嘴宝宝",
            "大奶罐",
            "幸福蛋",
            "雷公",
            "炎帝",
            "水君",
            "幼基拉斯",
            "沙基拉斯",
            "班基拉斯",
            "洛奇亚",
            "凤王",
            "时拉比",
            "木守宫",
            "森林蜥蜴",
            "蜥蜴王",
            "火稚鸡",
            "力壮鸡",
            "火焰鸡",
            "水跃鱼",
            "沼跃鱼",
            "巨沼怪",
            "土狼犬",
            "大狼犬",
            "蛇纹熊",
            "直冲熊",
            "刺尾虫",
            "甲壳茧",
            "狩猎凤蝶",
            "盾甲茧",
            "毒粉蛾",
            "莲叶童子",
            "莲帽小童",
            "乐天河童",
            "橡实果",
            "长鼻叶",
            "狡猾天狗",
            "傲骨燕",
            "大王燕",
            "长翅鸥",
            "大嘴鸥",
            "拉鲁拉丝",
            "奇鲁莉安",
            "沙奈朵",
            "溜溜糖球",
            "雨翅蛾",
            "蘑蘑菇",
            "斗笠菇",
            "懒人獭",
            "过动猿",
            "请假王",
            "土居忍士",
            "铁面忍者",
            "脱壳忍者",
            "咕妞妞",
            "吼爆弹",
            "爆音怪",
            "幕下力士",
            "铁掌力士",
            "露力丽",
            "朝北鼻",
            "向尾喵",
            "优雅猫",
            "勾魂眼",
            "大嘴娃",
            "可可多拉",
            "可多拉",
            "波士可多拉",
            "玛沙那",
            "恰雷姆",
            "落雷兽",
            "雷电兽",
            "正电拍拍",
            "负电拍拍",
            "电萤虫",
            "甜甜萤",
            "毒蔷薇",
            "溶食兽",
            "吞食兽",
            "利牙鱼",
            "巨牙鲨",
            "吼吼鲸",
            "吼鲸王",
            "呆火驼",
            "喷火驼",
            "煤炭龟",
            "跳跳猪",
            "噗噗猪",
            "晃晃斑",
            "大颚蚁",
            "超音波幼虫",
            "沙漠蜻蜓",
            "刺球仙人掌",
            "梦歌仙人掌",
            "青绵鸟",
            "七夕青鸟",
            "猫鼬斩",
            "饭匙蛇",
            "月石",
            "太阳岩",
            "泥泥鳅",
            "鲶鱼王",
            "龙虾小兵",
            "铁螯龙虾",
            "天秤偶",
            "念力土偶",
            "触手百合",
            "摇篮百合",
            "太古羽虫",
            "太古盔甲",
            "丑丑鱼",
            "美纳斯",
            "飘浮泡泡",
            "变隐龙",
            "怨影娃娃",
            "诅咒娃娃",
            "夜巡灵",
            "彷徨夜灵",
            "热带龙",
            "风铃铃",
            "阿勃梭鲁",
            "小果然",
            "雪童子",
            "冰鬼护",
            "海豹球",
            "海魔狮",
            "帝牙海狮",
            "珍珠贝",
            "猎斑鱼",
            "樱花鱼",
            "古空棘鱼",
            "爱心鱼",
            "宝贝龙",
            "甲壳龙",
            "暴飞龙",
            "铁哑铃",
            "金属怪",
            "巨金怪",
            "雷吉洛克",
            "雷吉艾斯",
            "雷吉斯奇鲁",
            "拉帝亚斯",
            "拉帝欧斯",
            "盖欧卡",
            "固拉多",
            "烈空坐",
            "基拉祈",
            "代欧奇希斯",
            "草苗龟",
            "树林龟",
            "土台龟",
            "小火焰猴",
            "猛火猴",
            "烈焰猴",
            "波加曼",
            "波皇子",
            "帝王拿波",
            "姆克儿",
            "姆克鸟",
            "姆克鹰",
            "大牙狸",
            "大尾狸",
            "圆法师",
            "音箱蟀",
            "小猫怪",
            "勒克猫",
            "伦琴猫",
            "含羞苞",
            "罗丝雷朵",
            "头盖龙",
            "战槌龙",
            "盾甲龙",
            "护城龙",
            "结草儿",
            "结草贵妇",
            "绅士蛾",
            "三蜜蜂",
            "蜂女王",
            "帕奇利兹",
            "泳圈鼬",
            "浮潜鼬",
            "樱花宝",
            "樱花儿",
            "无壳海兔",
            "海兔兽",
            "双尾怪手",
            "飘飘球",
            "随风球",
            "卷卷耳",
            "长耳兔",
            "梦妖魔",
            "乌鸦头头",
            "魅力喵",
            "东施喵",
            "铃铛响",
            "臭鼬噗",
            "坦克臭鼬",
            "铜镜怪",
            "青铜钟",
            "盆才怪",
            "魔尼尼",
            "小福蛋",
            "聒噪鸟",
            "花岩怪",
            "圆陆鲨",
            "尖牙陆鲨",
            "烈咬陆鲨",
            "小卡比兽",
            "利欧路",
            "路卡利欧",
            "沙河马",
            "河马兽",
            "钳尾蝎",
            "龙王蝎",
            "不良蛙",
            "毒骷蛙",
            "尖牙笼",
            "荧光鱼",
            "霓虹鱼",
            "小球飞鱼",
            "雪笠怪",
            "暴雪王",
            "玛狃拉",
            "自爆磁怪",
            "大舌舔",
            "超甲狂犀",
            "巨蔓藤",
            "电击魔兽",
            "鸭嘴炎兽",
            "波克基斯",
            "远古巨蜓",
            "叶伊布",
            "冰伊布",
            "天蝎王",
            "象牙猪",
            "多边兽乙型",
            "艾路雷朵",
            "大朝北鼻",
            "黑夜魔灵",
            "雪妖女",
            "洛托姆",
            "由克希",
            "艾姆利多",
            "亚克诺姆",
            "帝牙卢卡",
            "帕路奇亚",
            "席多蓝恩",
            "雷吉奇卡斯",
            "骑拉帝纳",
            "克雷色利亚",
            "霏欧纳",
            "玛纳霏",
            "达克莱伊",
            "谢米",
            "阿尔宙斯",
            "比克提尼",
            "藤藤蛇",
            "青藤蛇",
            "君主蛇",
            "暖暖猪",
            "炒炒猪",
            "炎武王",
            "水水獭",
            "双刃丸",
            "大剑鬼",
            "探探鼠",
            "步哨鼠",
            "小约克",
            "哈约克",
            "长毛狗",
            "扒手猫",
            "酷豹",
            "花椰猴",
            "花椰猿",
            "爆香猴",
            "爆香猿",
            "冷水猴",
            "冷水猿",
            "食梦梦",
            "梦梦蚀",
            "豆豆鸽",
            "咕咕鸽",
            "高傲雉鸡",
            "斑斑马",
            "雷电斑马",
            "石丸子",
            "地幔岩",
            "庞岩怪",
            "滚滚蝙蝠",
            "心蝙蝠",
            "螺钉地鼠",
            "龙头地鼠",
            "差不多娃娃",
            "搬运小匠",
            "铁骨土人",
            "修建老匠",
            "圆蝌蚪",
            "蓝蟾蜍",
            "蟾蜍王",
            "投摔鬼",
            "打击鬼",
            "虫宝包",
            "宝包茧",
            "保姆虫",
            "百足蜈蚣",
            "车轮球",
            "蜈蚣王",
            "木棉球",
            "风妖精",
            "百合根娃娃",
            "裙儿小姐",
            "野蛮鲈鱼",
            "黑眼鳄",
            "混混鳄",
            "流氓鳄",
            "火红不倒翁",
            "达摩狒狒",
            "沙铃仙人掌",
            "石居蟹",
            "岩殿居蟹",
            "滑滑小子",
            "头巾混混",
            "象征鸟",
            "哭哭面具",
            "迭失棺",
            "原盖海龟",
            "肋骨海龟",
            "始祖小鸟",
            "始祖大鸟",
            "破破袋",
            "灰尘山",
            "索罗亚",
            "索罗亚克",
            "泡沫栗鼠",
            "奇诺栗鼠",
            "哥德宝宝",
            "哥德小童",
            "哥德小姐",
            "单卵细胞球",
            "双卵细胞球",
            "人造细胞卵",
            "鸭宝宝",
            "舞天鹅",
            "迷你冰",
            "多多冰",
            "双倍多多冰",
            "四季鹿",
            "萌芽鹿",
            "电飞鼠",
            "盖盖虫",
            "骑士蜗牛",
            "哎呀球菇",
            "败露球菇",
            "轻飘飘",
            "胖嘟嘟",
            "保姆曼波",
            "电电虫",
            "电蜘蛛",
            "种子铁球",
            "坚果哑铃",
            "齿轮儿",
            "齿轮组",
            "齿轮怪",
            "麻麻小鱼",
            "麻麻鳗",
            "麻麻鳗鱼王",
            "小灰怪",
            "大宇怪",
            "烛光灵",
            "灯火幽灵",
            "水晶灯火灵",
            "牙牙",
            "斧牙龙",
            "双斧战龙",
            "喷嚏熊",
            "冻原熊",
            "几何雪花",
            "小嘴蜗",
            "敏捷虫",
            "泥巴鱼",
            "功夫鼬",
            "师父鼬",
            "赤面龙",
            "泥偶小人",
            "泥偶巨人",
            "驹刀小兵",
            "劈斩司令",
            "爆炸头水牛",
            "毛头小鹰",
            "勇士雄鹰",
            "秃鹰丫头",
            "秃鹰娜",
            "熔蚁兽",
            "铁蚁",
            "单首龙",
            "双首暴龙",
            "三首恶龙",
            "燃烧虫",
            "火神蛾",
            "勾帕路翁",
            "代拉基翁",
            "毕力吉翁",
            "龙卷云",
            "雷电云",
            "莱希拉姆",
            "捷克罗姆",
            "土地云",
            "酋雷姆",
            "凯路迪欧",
            "美洛耶塔",
            "盖诺赛克特",
            "哈力栗",
            "胖胖哈力",
            "布里卡隆",
            "火狐狸",
            "长尾火狐",
            "妖火红狐",
            "呱呱泡蛙",
            "呱头蛙",
            "甲贺忍蛙",
            "掘掘兔",
            "掘地兔",
            "小箭雀",
            "火箭雀",
            "烈箭鹰",
            "粉蝶虫",
            "粉蝶蛹",
            "彩粉蝶",
            "小狮狮",
            "火炎狮",
            "花蓓蓓",
            "花叶蒂",
            "花洁夫人",
            "坐骑小羊",
            "坐骑山羊",
            "顽皮熊猫",
            "霸道熊猫",
            "多丽米亚",
            "妙喵",
            "超能妙喵",
            "独剑鞘",
            "双剑鞘",
            "坚盾剑怪",
            "粉香香",
            "芳香精",
            "绵绵泡芙",
            "胖甜妮",
            "好啦鱿",
            "乌贼王",
            "龟脚脚",
            "龟足巨铠",
            "垃垃藻",
            "毒藻龙",
            "铁臂枪虾",
            "钢炮臂虾",
            "伞电蜥",
            "光电伞蜥",
            "宝宝暴龙",
            "怪颚龙",
            "冰雪龙",
            "冰雪巨龙",
            "仙子伊布",
            "摔角鹰人",
            "咚咚鼠",
            "小碎钻",
            "黏黏宝",
            "黏美儿",
            "黏美龙",
            "钥圈儿",
            "小木灵",
            "朽木妖",
            "南瓜精",
            "南瓜怪人",
            "冰宝",
            "冰岩怪",
            "嗡蝠",
            "音波龙",
            "哲尔尼亚斯",
            "伊裴尔塔尔",
            "基格尔德",
            "蒂安希",
            "胡帕",
            "波尔凯尼恩",
            "木木枭",
            "投羽枭",
            "狙射树枭",
            "火斑喵",
            "炎热喵",
            "炽焰咆哮虎",
            "球球海狮",
            "花漾海狮",
            "西狮海壬",
            "小笃儿",
            "喇叭啄鸟",
            "铳嘴大鸟",
            "猫鼬少",
            "猫鼬探长",
            "强颚鸡母虫",
            "虫电宝",
            "锹农炮虫",
            "好胜蟹",
            "好胜毛蟹",
            "花舞鸟",
            "萌虻",
            "蝶结萌虻",
            "岩狗狗",
            "鬃岩狼人",
            "弱丁鱼",
            "好坏星",
            "超坏星",
            "泥驴仔",
            "重泥挽马",
            "滴蛛",
            "滴蛛霸",
            "伪螳草",
            "兰螳花",
            "睡睡菇",
            "灯罩夜菇",
            "夜盗火蜥",
            "焰后蜥",
            "童偶熊",
            "穿着熊",
            "甜竹竹",
            "甜舞妮",
            "甜冷美后",
            "花疗环环",
            "智挥猩",
            "投掷猴",
            "胆小虫",
            "具甲武者",
            "沙丘娃",
            "噬沙堡爷",
            "拳海参",
            "属性：空",
            "银伴战兽",
            "小陨星",
            "树枕尾熊",
            "爆焰龟兽",
            "托戈德玛尔",
            "谜拟丘",
            "磨牙彩皮鱼",
            "老翁龙",
            "破破舵轮",
            "心鳞宝",
            "鳞甲龙",
            "杖尾鳞甲龙",
            "卡璞・鸣鸣",
            "卡璞・蝶蝶",
            "卡璞・哞哞",
            "卡璞・鳍鳍",
            "科斯莫古",
            "科斯莫姆",
            "索尔迦雷欧",
            "露奈雅拉",
            "虚吾伊德",
            "爆肌蚊",
            "费洛美螂",
            "电束木",
            "铁火辉夜",
            "纸御剑",
            "恶食大王",
            "奈克洛兹玛",
            "玛机雅娜",
            "玛夏多",
            "毒贝比",
            "四颚针龙",
            "垒磊石",
            "砰头小丑",
            "捷拉奥拉"
        };

        // Main Form Methods
        private void L_About_Click(object sender, EventArgs e)
        {
            new About().ShowDialog();
        }

        private void L_GARCInfo_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }

            string s = "游戏版本: " + Config.Version + Environment.NewLine;
            s = Config.Files.Select(file => file.Name).Aggregate(s, (current, t) => current + string.Format(Environment.NewLine + "{0} - {1}", t, Config.GetGARCFileName(t)));

            var copyPrompt = WinFormsUtil.Prompt(MessageBoxButtons.YesNo, s, "复制到剪切板?");
            if (copyPrompt != DialogResult.Yes)
                return;

            try { Clipboard.SetText(s); }
            catch { WinFormsUtil.Alert("无法复制到剪切板"); }
        }

        private void L_Game_Click(object sender, EventArgs e) => new EnhancedRestore(Config).ShowDialog();

        private void B_Open_Click(object sender, EventArgs e)
        {
            using var fbd = new FolderBrowserDialog();
            if (fbd.ShowDialog() == DialogResult.OK)
                OpenQuick(fbd.SelectedPath);
            ChangeLanguage();
        }

        private void ChangeLanguage()
        {
            if (!Tab_RomFS.Enabled || Config == null)
                return;
            if ((Config.XY || Config.ORAS) && Language > 7)
            {
                WinFormsUtil.Alert("游戏语言不可用，已设置为日语-片假名。");
                if (InvokeRequired)
                    Invoke((MethodInvoker)delegate { CB_Lang.SelectedIndex = 0; });
                else CB_Lang.SelectedIndex = 0;
                return; // set event re-triggers this method
            }

            UpdateProgramTitle();
            Config.InitializeGameText();
            Properties.Settings.Default.Language = Language;
            Properties.Settings.Default.Save();
        }

        private void ChangeLanguage(object sender, EventArgs e)
        {
            if (InvokeRequired)
                Invoke((MethodInvoker)delegate { Language = CB_Lang.SelectedIndex; });
            else Language = CB_Lang.SelectedIndex;
            if (Config != null)
                Config.Language = Language;
            Menu_Options.DropDown.Close();
            if (!Tab_RomFS.Enabled || Config == null)
                return;

            if ((Config.XY || Config.ORAS) && Language > 7)
            {
                WinFormsUtil.Alert("游戏语言不可用，已设置为日语-片假名。");
                if (InvokeRequired)
                    Invoke((MethodInvoker)delegate { CB_Lang.SelectedIndex = 0; });
                else CB_Lang.SelectedIndex = 0;
                return; // set event re-triggers this method
            }

            UpdateProgramTitle();
            Config.InitializeGameText();
            Properties.Settings.Default.Language = Language;
            Properties.Settings.Default.Save();
        }

        private void Menu_Exit_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void CloseForm(object sender, FormClosingEventArgs e)
        {
            if (Config == null)
                return;
            var g = Config.GARCGameText;
            string[][] files = Config.GameTextStrings;
            g.Files = files.Select(x => TextFile.GetBytes(Config, x)).ToArray();
            g.Save();

            try
            {
                var text = RandSettings.Save();
                File.WriteAllLines(RandSettings.FileName, text, Encoding.Unicode);
            }
            #pragma warning disable CA1031 // Do not catch general exception types
            catch
            #pragma warning restore CA1031 // Do not catch general exception types
            {
                // ignored
            }

            // Save ExtraSettings
            SaveExtraSettings();

        }

        private void OpenQuick(string path)
        {
            if (ThreadActive())
                return;

            try
            {
                if (!Directory.Exists(path)) // File
                    OpenFile(path);
                else // Directory
                    OpenDirectory(path);
            }
            catch (Exception ex)
            {
                WinFormsUtil.Error($"无法打开 -- {path}", ex.Message);
                ResetStatus();
            }
        }

        private void OpenFile(string path)
        {
            if (!File.Exists(path))
                return;

            FileInfo fi = new FileInfo(path);
            if (fi.Name.Contains("code.bin")) // Compress/Decompress .code.bin
            {
                OpenExeFSCodeBinary(path, fi);
            }
            else if (fi.Name.IndexOf("exe", StringComparison.OrdinalIgnoreCase) >= 0) // Unpack exefs
            {
                OpenExeFSCombined(path, fi);
            }
            else if (fi.Name.IndexOf("rom", StringComparison.OrdinalIgnoreCase) >= 0)
            {
                WinFormsUtil.Alert("RomFS解包未执行。");
            }
            else
            {
                var dr = WinFormsUtil.Prompt(MessageBoxButtons.YesNoCancel, "是否解包子文件?", "取消: 中止");
                if (dr == DialogResult.Cancel)
                    return;
                bool recurse = dr == DialogResult.Yes;
                ToolsUI.OpenARC(path, pBar1, recurse);
            }
        }

        private void OpenExeFSCombined(string path, FileInfo fi)
        {
            if (fi.Length % 0x200 != 0)
                return;

            var prompt = WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "检测到ExeFS.bin文件", "是否解包?");
            if (prompt != DialogResult.Yes)
                return;

            new Thread(() =>
            {
                Interlocked.Increment(ref threads);
                ExeFS.UnpackExeFS(path, Path.GetDirectoryName(path));
                Interlocked.Decrement(ref threads);
                WinFormsUtil.Alert("已解包!");
            }).Start();
        }

        private void OpenExeFSCodeBinary(string path, FileInfo fi)
        {
            if (fi.Length % 0x200 == 0)
            {
                var prompt = WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "检测到未压缩的code.bin文件", "是否压缩? 文件将会被替换。");
                if (prompt != DialogResult.Yes)
                    return;
                new Thread(() =>
                {
                    Interlocked.Increment(ref threads);
                    new BLZCoder(new[] {"-en", path}, pBar1);
                    Interlocked.Decrement(ref threads);
                    WinFormsUtil.Alert("已压缩!");
                }).Start();
            }
            else
            {
                var prompt = WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "检测到压缩的code.bin文件", "是否解压? 文件将会被替换。");
                if (prompt != DialogResult.Yes)
                    return;
                new Thread(() =>
                {
                    Interlocked.Increment(ref threads);
                    new BLZCoder(new[] { "-d", path }, pBar1);
                    Interlocked.Decrement(ref threads);
                    WinFormsUtil.Alert("已解压!");
                }).Start();
            }
        }

        private void OpenDirectory(string path)
        {
            ChangeLanguage();

            if (!Directory.Exists(path))
                return;

            // Check for ROMFS/EXEFS/EXHEADER
            RomFSPath = ExeFSPath = null; // Reset
            Config = null;

            string[] folders = Directory.GetDirectories(path);
            int count = folders.Length;

            // Find RomFS folder
            foreach (string f in folders.Where(f => new DirectoryInfo(f).Name.IndexOf("rom", StringComparison.OrdinalIgnoreCase) >= 0 && Directory.Exists(f)))
                CheckIfRomFS(f);
            // Find ExeFS folder
            foreach (string f in folders.Where(f => new DirectoryInfo(f).Name.IndexOf("exe", StringComparison.OrdinalIgnoreCase) >= 0 && Directory.Exists(f)))
                CheckIfExeFS(f);

            if (count > 4)
                WinFormsUtil.Alert("游戏文件夹中最好只包含必要文件。");

            // Enable buttons if applicable
            Tab_RomFS.Enabled = Menu_Restore.Enabled = Tab_CRO.Enabled = Menu_CRO.Enabled = Menu_Shuffler.Enabled = RomFSPath != null;
            Tab_ExeFS.Enabled = RomFSPath != null && ExeFSPath != null;
            if (RomFSPath != null && Config != null)
            {
                ToggleSubEditors();
                string newtext = $"游戏已加载: {Config.Version}";
                if (L_Game.Text != newtext && Directory.Exists("personal"))
                {
                    Directory.Delete("personal", true);
                } // Force reloading of personal data if the game is switched.

                L_Game.Text = newtext;
                TB_Path.Text = path;
            }
            else if (ExeFSPath != null)
            {
                L_Game.Text = "ExeFS 已加载 - 无RomFS";
                TB_Path.Text = path;
            }
            else
            {
                L_Game.Text = "未加载游戏";
                TB_Path.Text = "";
            }

            if (RomFSPath != null)
            {
                // Trigger Data Loading
                if (RTB_Status.Text.Length > 0)
                    RTB_Status.Clear();

                UpdateStatus("发现数据! 正在为子表单加载持久数据...", false);
                try
                {
                    Config.Initialize(RomFSPath, ExeFSPath, Language);
                    Config.BackupFiles();
                }
                catch (Exception ex)
                {
                    WinFormsUtil.Error("无法从 romfs 加载游戏数据。请仔细检查你的 ROM 转储是否正确。", ex.Message);
                    ResetStatus();
                    return;
                }
            }

            UpdateProgramTitle();

            // Enable Rebuilding options if all files have been found
            CheckIfExHeader(path);
            Menu_ExeFS.Enabled =                                                                  ExeFSPath != null;
            Menu_RomFS.Enabled = Menu_Restore.Enabled = Menu_GARCs.Enabled = RomFSPath != null;
            Menu_Patch.Enabled =                                             RomFSPath != null && ExeFSPath != null;
            Menu_3DS.Enabled   =                                             RomFSPath != null && ExeFSPath != null && ExHeaderPath != null;
            Menu_Trimmed3DS.Enabled =                                        RomFSPath != null && ExeFSPath != null && ExHeaderPath != null;

            // Change L_Game if RomFS and ExeFS exists to a better descriptor
            SMDH = ExeFSPath != null
                ? File.Exists(Path.Combine(ExeFSPath, "icon.bin")) ? new SMDH(Path.Combine(ExeFSPath, "icon.bin")) : null
                : null;
            HANSgameID = SMDH != null ? (SMDH.AppSettings?.StreetPassID ?? 0) : 0;
            L_Game.Visible = SMDH == null && RomFSPath != null;
            TB_Path.Select(TB_Path.TextLength, 0);
            // Method finished.
            System.Media.SystemSounds.Asterisk.Play();
            ResetStatus();
            Properties.Settings.Default.GamePath = path;
            Properties.Settings.Default.Save();
        }

        private void B_ExtractCXI_Click(object sender, EventArgs e)
        {
            const string l1 = "提取 CXI 文件需要数 GB 的磁盘空间，并且需要一些时间才能完成。";
            const string l2 = "如果你想继续，请按“确定”选择你的CXI文件，然后再选择输出目录。为获得最佳效果，请确保输出目录为空。";
            var prompt = WinFormsUtil.Prompt(MessageBoxButtons.OKCancel, l1, l2);
            if (prompt != DialogResult.OK)
                return;

            using var ofd = new OpenFileDialog {Title = "选择CXI文件", Filter = "CXI files (*.cxi)|*.cxi"};
            if (ofd.ShowDialog() != DialogResult.OK)
                return;

            using var fbd = new FolderBrowserDialog();
            DialogResult result = fbd.ShowDialog();
            if (result != DialogResult.OK)
                return;

            var inputCXI = ofd.FileName;
            ExtractNCCH(inputCXI, fbd.SelectedPath);
        }

        private void B_Extract3DS_Click(object sender, EventArgs e)
        {
            const string l1 = "提取 3DS 文件需要数 GB 的磁盘空间，并且需要一些时间才能完成。";
            const string l2 = "如果你想继续，请按“确定”选择你的3DS文件，然后再选择输出目录。为获得最佳效果，请确保输出目录为空。";
            var prompt = WinFormsUtil.Prompt(MessageBoxButtons.OKCancel, l1, l2);
            if (prompt != DialogResult.OK)
                return;

            using var ofd = new OpenFileDialog {Title = "选择3DS文件", Filter = "3DS files (*.3ds)|*.3ds"};
            if (ofd.ShowDialog() != DialogResult.OK)
                return;

            using var fbd = new FolderBrowserDialog();
            DialogResult result = fbd.ShowDialog();
            if (result != DialogResult.OK)
                return;

            var input3DS = ofd.FileName;
            ExtractNCSD(input3DS, fbd.SelectedPath);
        }

        private void ExtractNCCH(string ncchPath, string outputDirectory)
        {
            if (!File.Exists(ncchPath))
                return;

            NCCH ncch = new NCCH();

            new Thread(() =>
            {
                Interlocked.Increment(ref threads);
                ncch.ExtractNCCHFromFile(ncchPath, outputDirectory, RTB_Status, pBar1);
                Interlocked.Decrement(ref threads);
                WinFormsUtil.Alert("提取完成!");
            }).Start();
        }

        private void ExtractNCSD(string ncsdPath, string outputDirectory)
        {
            if (!File.Exists(ncsdPath))
                return;

            NCSD ncsd = new NCSD();
            new Thread(() =>
            {
                Interlocked.Increment(ref threads);
                ncsd.ExtractFilesFromNCSD(ncsdPath, outputDirectory, RTB_Status, pBar1);
                Interlocked.Decrement(ref threads);
                WinFormsUtil.Alert("提取完成!");
            }).Start();
        }

        private void ToggleSubEditors()
        {
            // Hide all buttons
            foreach (var f in from TabPage t in TC_RomFS.TabPages from f in t.Controls.OfType<FlowLayoutPanel>() select f)
            {
                for (int i = f.Controls.Count - 1; i >= 0; i--)
                    f.Controls.Remove(f.Controls[i]);
            }

            B_MoveTutor.Visible = Config.ORAS; // Default false unless loaded

            Control[] romfs, exefs, cro;

            switch (Config.Generation)
            {
                case 6:
                    romfs = new Control[] {B_GameText, B_StoryText, B_Personal, B_Evolution, B_LevelUp, B_Wild, B_MegaEvo, B_EggMove, B_Trainer, B_Item, B_Move, B_Maison, B_TitleScreen, B_OWSE};
                    exefs = new Control[] {B_MoveTutor, B_TMHM, B_Mart, B_Pickup, B_OPower, B_ShinyRate};
                    cro = new Control[] {B_TypeChart, B_Starter, B_Gift, B_Static};
                    B_MoveTutor.Visible = Config.ORAS; // Default false unless loaded
                    break;
                case 7:
                    romfs = new Control[] {B_GameText, B_StoryText, B_Personal, B_Evolution, B_LevelUp, B_Wild, B_MegaEvo, B_EggMove, B_Trainer, B_Item, B_Move, B_Royal, B_Pickup, B_OWSE };
                    exefs = new Control[] {B_TM, B_TypeChart, B_ShinyRate};
                    cro = new Control[] {B_Mart, B_MoveTutor};
                    B_MoveTutor.Visible = Config.USUM;

                    if (Config.Version != GameVersion.SMDEMO)
                        romfs = romfs.Concat(new[] {B_Static}).ToArray();
                    break;
                default:
                    romfs = exefs = cro = new Control[] {new Label {Text = "无可用编辑器."}};
                    break;
            }

            FLP_RomFS.Controls.AddRange(romfs);
            FLP_ExeFS.Controls.AddRange(exefs);
            FLP_CRO.Controls.AddRange(cro);
        }

        private void UpdateProgramTitle() => Text = GetProgramTitle();

        private static string GetProgramTitle()
        {
            if (versionCheckFailed)
            {
                if (SMDH?.AppSettings == null)
                {
                    return "pk3DS中文版" + "_" + OfficialBuild + "." + Version + "（检查更新失败）";
                }

                int[] AILang = { 0, 0, 1, 2, 4, 3, 5, 7, 8, 9, 6, 11 };
                return "pk3DS中文版" + "_" + OfficialBuild + "." + Version + ": " + SMDH.AppInfo[AILang[Language]].ShortDescription + "（检查更新失败）";
            } else if (ifVersionChecked)
            {
                if (ifUpToDate)
                {
                    if (SMDH?.AppSettings == null)
                    {
                        return "pk3DS中文版" + "_" + OfficialBuild + "." + Version + "（已是最新版）";
                    }

                    int[] AILang = { 0, 0, 1, 2, 4, 3, 5, 7, 8, 9, 6, 11 };
                    return "pk3DS中文版" + "_" + OfficialBuild + "." + Version + ": " + SMDH.AppInfo[AILang[Language]].ShortDescription + "（已是最新版）";
                }
                else
                {
                    if (SMDH?.AppSettings == null)
                    {
                        return "pk3DS中文版" + "_" + OfficialBuild + "." + Version + "（有新版本可用: " + latestVersions[0] + "." + latestVersions[1] + "）";
                    }

                    int[] AILang = { 0, 0, 1, 2, 4, 3, 5, 7, 8, 9, 6, 11 };
                    return "pk3DS中文版" + "_" + OfficialBuild + "." + Version + ": " + SMDH.AppInfo[AILang[Language]].ShortDescription
                        + "（有新版本可用: " + latestVersions[0] + "." + latestVersions[1] + "）";
                }
            } else
            {
                // 0 - JP
                // 1 - EN
                // 2 - FR
                // 3 - DE
                // 4 - IT
                // 5 - ES
                // 6 - CHS
                // 7 - KO
                // 8 -
                // 11 - CHT
                if (SMDH?.AppSettings == null)
                {
                    return "pk3DS中文版" + "_" + OfficialBuild + "." + Version;
                }

                int[] AILang = { 0, 0, 1, 2, 4, 3, 5, 7, 8, 9, 6, 11 };
                return "pk3DS中文版" + "_" + OfficialBuild + "." + Version + ": " + SMDH.AppInfo[AILang[Language]].ShortDescription;
            }
        }

        private static GameConfig CheckGameType(string[] files)
        {
            try
            {
                if (files.Length > 1000)
                    return null;
                string[] fileArr = Directory.GetFiles(Path.Combine(Directory.GetParent(files[0]).FullName, "a"), "*", SearchOption.AllDirectories);
                int fileCount = fileArr.Count(file => Path.GetFileName(file)?.Length == 1);
                return new GameConfig(fileCount);
            }
            catch { }
            return null;
        }

        private bool CheckIfRomFS(string path)
        {
            string[] top = Directory.GetDirectories(path);
            FileInfo fi = new FileInfo(top[top.Length > 1 ? 1 : 0]);
            // Check to see if the folder is romfs
            if (fi.Name == "a")
            {
                string[] files = Directory.GetFiles(path, "*", SearchOption.AllDirectories);
                var cfg = CheckGameType(files);

                if (cfg == null)
                {
                    RomFSPath = null;
                    Config = null;
                    WinFormsUtil.Error("文件数与预期的数目不匹配.", "文件: " + files.Length);
                    return false;
                }

                RomFSPath = path;
                Config = cfg;
                return true;
            }
            WinFormsUtil.Error("父级目录未包含 'a' 文件夹.");
            RomFSPath = null;
            return false;
        }

        private bool CheckIfExeFS(string path)
        {
            string[] files = Directory.GetFiles(path);
            if (files.Length == 1 && string.Equals(Path.GetFileName(files[0]), "exefs.bin", StringComparison.OrdinalIgnoreCase))
            {
                // Prompt if the user wants to unpack the ExeFS.
                if (DialogResult.Yes != WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "检测到ExeFS bin文件.", "是否解包?"))
                    return false;

                // User wanted to unpack. Unpack.
                if (!ExeFS.UnpackExeFS(files[0], path))
                    return false; // on unpack fail

                // Remove ExeFS binary after unpacking
                File.Delete(files[0]);

                files = Directory.GetFiles(path);
                // unpack successful, continue onward!
            }

            if (files.Length != 3 && files.Length != 4)
                return false;

            FileInfo fi = new FileInfo(files[0]);
            if (!fi.Name.Contains("code"))
            {
                if (new FileInfo(files[1]).Name != "code.bin")
                    return false;

                File.Move(files[1], Path.Combine(Path.GetDirectoryName(files[1]), ".code.bin"));
                files = Directory.GetFiles(path);
                fi = new FileInfo(files[0]);
            }
            if (fi.Length % 0x200 != 0 && WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "检测到压缩的bin文件.", "是否解压缩? 文件将会被替换.") == DialogResult.Yes)
                new Thread(() => { Interlocked.Increment(ref threads); new BLZCoder(new[] { "-d", files[0] }, pBar1); Interlocked.Decrement(ref threads); WinFormsUtil.Alert("已解压!"); }).Start();

            ExeFSPath = path;
            return true;
        }

        private bool CheckIfExHeader(string path)
        {
            ExHeaderPath = null;
            // Input folder path should contain the ExHeader.
            string[] files = Directory.GetFiles(path);
            foreach (string fp in from s in files let f = new FileInfo(s) where (f.Name.StartsWith("exh", StringComparison.OrdinalIgnoreCase) || f.Name.StartsWith("decryptedexh", StringComparison.OrdinalIgnoreCase)) && f.Length == 0x800 select s)
                ExHeaderPath = fp;

            return ExHeaderPath != null;
        }

        private bool ThreadActive()
        {
            if (threads <= 0)
                return false;
            WinFormsUtil.Alert("请先等待所有操作完成."); return true;
        }

        private void TabMain_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop)) e.Effect = DragDropEffects.Copy;
        }

        private void TabMain_DragDrop(object sender, DragEventArgs e)
        {
            string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);
            string path = files[0]; // open first D&D
            OpenQuick(path);
        }

        // RomFS Subform Items
        private void RebuildRomFS(object sender, EventArgs e)
        {
            if (ThreadActive())
                return;
            if (RomFSPath == null)
                return;
            if (WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "是否重建 RomFS?") != DialogResult.Yes)
                return;

            SaveFileDialog sfd = new SaveFileDialog
            {
                FileName = HANSgameID != 0 ? HANSgameID.ToString("X8") + ".romfs" : "romfs.bin",
                Filter = "HANS RomFS|*.romfs|Binary File|*.bin|All Files|*.*"
            };
            sfd.FilterIndex = HANSgameID != 0 ? 0 : sfd.Filter.Length - 1;

            if (sfd.ShowDialog() == DialogResult.OK)
            {
                new Thread(() =>
                {
                    UpdateStatus(Environment.NewLine + "正在构建 RomFS bin文件. 请等待程序运行结束.");

                    Interlocked.Increment(ref threads);
                    RomFS.BuildRomFS(RomFSPath, sfd.FileName, RTB_Status, pBar1);
                    Interlocked.Decrement(ref threads);

                    UpdateStatus("RomFS bin文件已保存." + Environment.NewLine);
                    WinFormsUtil.Alert("已写入 RomFS bin文件:", sfd.FileName);
                }).Start();
            }
        }

        private void B_GameText_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            new Thread(() =>
            {
                var g = Config.GARCGameText;
                string[][] files = Config.GameTextStrings;
                Invoke((Action)(() => new TextEditor(files, "gametext").ShowDialog()));
                g.Files = TryWriteText(files, g);
                g.Save();
            }).Start();
        }

        private void B_StoryText_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            new Thread(() =>
            {
                var g = Config.GetGARCData("storytext");
                string[][] files = g.Files.Select(file => new TextFile(Config, file).Lines).ToArray();
                Invoke((Action)(() => new TextEditor(files, "storytext").ShowDialog()));
                g.Files = TryWriteText(files, g);
                g.Save();
            }).Start();
        }

        private static byte[][] TryWriteText(string[][] files, GARCFile g)
        {
            byte[][] data = new byte[files.Length][];
            var errata = new List<string>();
            for (int i = 0; i < data.Length; i++)
            {
                try
                {
                    data[i] = TextFile.GetBytes(Config, files[i]);
                }
                catch (Exception ex)
                {
                    errata.Add($"File {i:000} | {ex.Message}");
                    // revert changes
                    data[i] = g.GetFile(i);
                }
            }
            if (errata.Count == 0)
                return data;

            string[] options =
            {
                "取消: 丢弃所有更改",
                "是: 保存更改, 导出错误信息",
                "否: 保存更改, 不导出错误信息"
            };
            var dr = WinFormsUtil.Prompt(MessageBoxButtons.YesNoCancel, "试图保存文本时出错."
                + Environment.NewLine + "示例: " + errata[0],
                string.Join(Environment.NewLine, options));
            if (dr == DialogResult.Cancel)
                return g.Files; // discard
            if (dr == DialogResult.No)
                return data;

            const string txt_errata = "text_errata.txt";
            const string txt_failed = "text_failed.txt";
            File.WriteAllLines(txt_errata, errata);
            TextEditor.ExportTextFile(txt_failed, true, files);

            WinFormsUtil.Alert("已保存TXT文件至: " + Application.StartupPath,
                txt_errata + Environment.NewLine + txt_failed);

            return data;
        }

        private void B_Maison_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            DialogResult dr;
            switch (Config.Generation)
            {
                case 6:
                    dr = WinFormsUtil.Prompt(MessageBoxButtons.YesNoCancel, "编辑【超级对战屋】还是【普通对战屋】？", "是 = 超级对战屋, 否 = 普通对战屋, 取消 = 中止");
                    break;
                case 7:
                    dr = WinFormsUtil.Prompt(MessageBoxButtons.YesNoCancel, "编辑【皇家对战】还是【对战树】？", "是 = 皇家对战, 否 = 对战树, 取消 = 中止");
                    break;
                default:
                    return;
            }
            if (dr == DialogResult.Cancel)
                return;

            new Thread(() =>
            {
                bool super = dr == DialogResult.Yes;
                string c = super ? "S" : "N";
                var trdata = Config.GetGARCData("maisontr"+c);
                var trpoke = Config.GetGARCData("maisonpk"+c);
                byte[][] trd = trdata.Files;
                byte[][] trp = trpoke.Files;
                switch (Config.Generation)
                {
                    case 6:
                        Invoke((Action)(() => new MaisonEditor6(trd, trp, super).ShowDialog()));
                        break;
                    case 7:
                        Invoke((Action)(() => new MaisonEditor7(trd, trp, super).ShowDialog()));
                        break;
                }
                trdata.Files = trd;
                trpoke.Files = trp;
                trdata.Save();
                trpoke.Save();
            }).Start();
        }

        private void B_Personal_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            new Thread(() =>
            {
                byte[][] d = Config.GARCPersonal.Files;
                switch (Config.Generation)
                {
                    case 6:
                        Invoke((Action)(() => new PersonalEditor6(d).ShowDialog()));
                        break;
                    case 7:
                        Invoke((Action)(() => new PersonalEditor7(d).ShowDialog()));
                        break;
                }
                // Set Master Table back
                for (int i = 0; i < d.Length - 1; i++)
                    d[i].CopyTo(d[d.Length-1], i * d[i].Length);

                Config.GARCPersonal.Files = d;
                Config.GARCPersonal.Save();
                Config.InitializePersonal();
            }).Start();
        }

        private void B_Trainer_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            new Thread(() =>
            {
                var trclass = Config.GetGARCData("trclass");
                var trdata = Config.GetGARCData("trdata");
                var trpoke = Config.GetGARCData("trpoke");
                byte[][] trc = trclass.Files;
                byte[][] trd = trdata.Files;
                byte[][] trp = trpoke.Files;

                switch (Config.Generation)
                {
                    case 6:
                        Invoke((Action)(() => new RSTE(trd, trp).ShowDialog()));
                        break;
                    case 7:
                        Invoke((Action)(() => new SMTE(trd, trp).ShowDialog()));
                        break;
                }
                trclass.Files = trc;
                trdata.Files = trd;
                trpoke.Files = trp;
                trclass.Save();
                trdata.Save();
                trpoke.Save();
            }).Start();
        }

        private void B_Wild_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            new Thread(() =>
            {
                string[] files;
                Action action;
                switch (Config.Generation)
                {
                    case 6:
                        files = new[] { "encdata" };
                        if (Config.ORAS)
                            action = () => new RSWE().ShowDialog();
                        else if (Config.XY)
                            action = () => new XYWE().ShowDialog();
                        else return;

                        Invoke((MethodInvoker)delegate { Enabled = false; });
                        FileGet(files, false);
                        Invoke(action);
                        FileSet(files);
                        Invoke((MethodInvoker)delegate { Enabled = true; });
                        break;
                    case 7:
                        Invoke((MethodInvoker)delegate { Enabled = false; });
                        Interlocked.Increment(ref threads);

                        files = new [] { "encdata", "zonedata", "worlddata" };
                        UpdateStatus($"GARC 已取得: {files[0]}... ");
                        var ed = Config.GetlzGARCData(files[0]);
                        UpdateStatus($"GARC 已取得: {files[1]}... ");
                        var zd = Config.GetlzGARCData(files[1]);
                        UpdateStatus($"GARC 已取得: {files[2]}... ");
                        var wd = Config.GetlzGARCData(files[2]);
                        UpdateStatus("运行SMWE中... ");
                        action = () => new SMWE(ed, zd, wd).ShowDialog();
                        Invoke(action);

                        UpdateStatus($"GARC 已修改: {files[0]}... ");
                        ed.Save();
                        ResetStatus();
                        Interlocked.Decrement(ref threads);
                        Invoke((MethodInvoker)delegate { Enabled = true; });
                        break;
                    default:
                        return;
                }
            }).Start();
        }

        private void B_OWSE_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            if (DialogResult.Yes != WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "不推荐绝大部分玩家使用世界脚本编辑器，它仍然未完成。", "是否继续?"))
                return;
            switch (Config.Generation)
            {
                case 6:
                    RunOWSE6();
                    return;
                case 7:
                    RunOWSE7();
                    return;
            }
        }

        private void RunOWSE6()
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            Enabled = false;
            new Thread(() =>
            {
                bool reload = ModifierKeys == Keys.Control || ModifierKeys == (Keys.Alt | Keys.Control);
                string[] files = {"encdata", "storytext", "mapGR", "mapMatrix"};
                if (reload || files.Sum(t => Directory.Exists(t) ? 0 : 1) != 0) // Dev bypass if all exist already
                    FileGet(files, false);

                // Don't set any data back. Just view.
                {
                    var g = Config.GetGARCData("storytext");
                    string[][] tfiles = g.Files.Select(file => new TextFile(Config, file).Lines).ToArray();
                    Invoke((Action)(() => new OWSE().Show()));
                    Invoke((Action)(() => new TextEditor(tfiles, "storytext").Show()));
                    while (Application.OpenForms.Count > 1)
                        Thread.Sleep(200);
                }
                Invoke((MethodInvoker) delegate { Enabled = true; });
                FileSet(files);
            }).Start();
        }

        private void RunOWSE7()
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            Enabled = false;
            new Thread(() =>
            {
                var files = new[] { "encdata", "zonedata", "worlddata" };
                UpdateStatus($"GARC 已取得: {files[0]}... ");
                var ed = Config.GetlzGARCData(files[0]);
                UpdateStatus($"GARC 已取得: {files[1]}... ");
                var zd = Config.GetlzGARCData(files[1]);
                UpdateStatus($"GARC 已取得: {files[2]}... ");
                //var wd = Config.GetlzGARCData(files[2]);

                var g = Config.GetGARCData("storytext");
                string[][] tfiles = g.Files.Select(file => new TextFile(Config, file).Lines).ToArray();
                Invoke((Action)(() => new TextEditor(tfiles, "storytext").Show()));
                Invoke((Action)(() => new OWSE7(ed, zd).Show()));
                while (Application.OpenForms.Count > 1)
                    Thread.Sleep(200);
                Invoke((MethodInvoker)delegate { Enabled = true; });
            }).Start();
        }

        private void B_Evolution_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            new Thread(() =>
            {
                var g = Config.GetGARCData("evolution");
                byte[][] d = g.Files;
                switch (Config.Generation)
                {
                    case 6:
                        Invoke((Action)(() => new EvolutionEditor6(d).ShowDialog()));
                        break;
                    case 7:
                        Invoke((Action)(() => new EvolutionEditor7(d).ShowDialog()));
                        break;
                }
                g.Files = d;
                Config.InitializeEvos();
                g.Save();
            }).Start();
        }

        private void B_MegaEvo_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            new Thread(() =>
            {
                var g = Config.GetGARCData("megaevo");
                byte[][] d = g.Files;
                switch (Config.Generation)
                {
                    case 6:
                        Invoke((Action)(() => new MegaEvoEditor6(d).ShowDialog()));
                        break;
                    case 7:
                        Invoke((Action)(() => new MegaEvoEditor7(d).ShowDialog()));
                        break;
                }
                g.Files = d;
                g.Save();
            }).Start();
        }

        private void B_Item_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            new Thread(() =>
            {
                var g = Config.GetGARCData("item");
                byte[][] d = g.Files;
                switch (Config.Generation)
                {
                    case 6:
                        Invoke((Action)(() => new ItemEditor6(d).ShowDialog()));
                        break;
                    case 7:
                        Invoke((Action)(() => new ItemEditor7(d).ShowDialog()));
                        break;
                }
                g.Files = d;
                g.Save();
            }).Start();
        }

        private void B_Move_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            new Thread(() =>
            {
                var g = Config.GARCMoves;
                byte[][] Moves;
                switch (Config.Generation)
                {
                    case 6:
                        bool isMini = Config.ORAS;
                        Moves = isMini ? Mini.UnpackMini(g.GetFile(0), "WD") : g.Files;
                        Invoke((Action)(() => new MoveEditor6(Moves).ShowDialog()));
                        g.Files = isMini ? new[] { Mini.PackMini(Moves, "WD") } : Moves;
                        break;
                    case 7:
                        Moves = Mini.UnpackMini(g.GetFile(0), "WD");
                        Invoke((Action)(() => new MoveEditor7(Moves).ShowDialog()));
                        g.Files = new[] {Mini.PackMini(Moves, "WD")};
                        break;
                }
                g.Save();
                Config.InitializeMoves();
            }).Start();
        }

        private void B_LevelUp_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            new Thread(() =>
            {
                byte[][] d = Config.GARCLearnsets.Files;
                switch (Config.Generation)
                {
                    case 6:
                        Invoke((Action)(() => new LevelUpEditor6(d).ShowDialog()));
                        break;
                    case 7:
                        Invoke((Action)(() => new LevelUpEditor7(d).ShowDialog()));
                        break;
                }
                Config.GARCLearnsets.Files = d;
                Config.GARCLearnsets.Save();
                Config.InitializeLearnset();
            }).Start();
        }

        private void B_EggMove_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            new Thread(() =>
            {
                var g = Config.GetGARCData("eggmove");
                byte[][] d = g.Files;
                switch (Config.Generation)
                {
                    case 6:
                        Invoke((Action)(() => new EggMoveEditor6(d).ShowDialog()));
                        break;
                    case 7:
                        Invoke((Action)(() => new EggMoveEditor7(d).ShowDialog()));
                        break;
                }
                g.Files = d;
                g.Save();
            }).Start();
        }

        private void B_TitleScreen_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            new Thread(() =>
            {
                string[] files = { "titlescreen" };
                FileGet(files); // Compressed files exist, handled in the other form since there's so many
                Invoke((Action)(() => new TitleScreenEditor6().ShowDialog()));
                FileSet(files);
            }).Start();
        }
        // RomFS File Requesting Method Wrapper
        private void FileGet(string[] files, bool skipDecompression = true, bool skipGet = false)
        {
            if (skipGet || skipBoth)
                return;
            foreach (string toEdit in files)
            {
                string GARC = Config.GetGARCFileName(toEdit);
                UpdateStatus($"GARC 已取得: {toEdit} @ {GARC}... ");
                ThreadGet(Path.Combine(RomFSPath, GARC), toEdit, true, skipDecompression);
                while (threads > 0) Thread.Sleep(50);
                ResetStatus();
            }
        }

        private void FileSet(IEnumerable<string> files, bool keep = false)
        {
            if (skipBoth)
                return;
            foreach (string toEdit in files)
            {
                string GARC = Config.GetGARCFileName(toEdit);
                UpdateStatus($"GARC 已修改: {toEdit} @ {GARC}... ");
                ThreadSet(Path.Combine(RomFSPath, GARC), toEdit, 4); // 4 bytes for Gen6
                while (threads > 0) Thread.Sleep(50);
                if (!keep && Directory.Exists(toEdit)) Directory.Delete(toEdit, true);
                ResetStatus();
            }
        }

        // ExeFS Subform Items
        private void RebuildExeFS(object sender, EventArgs e)
        {
            if (ExeFSPath == null)
                return;
            if (WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "是否重建 ExeFS?") != DialogResult.Yes)
                return;

            string[] files = Directory.GetFiles(ExeFSPath);
            int file = 0; if (files[1].Contains("code")) file = 1;

            SaveFileDialog sfd = new SaveFileDialog
            {
                FileName = HANSgameID != 0 ? HANSgameID.ToString("X8") + ".exefs" : "exefs.bin",
                Filter = "HANS ExeFS|*.exefs|Binary File|*.bin|All Files|*.*"
            };
            sfd.FilterIndex = HANSgameID != 0 ? 0 : sfd.Filter.Length - 1;

            if (sfd.ShowDialog() == DialogResult.OK)
            {
                new Thread(() =>
                {
                    Interlocked.Increment(ref threads);
                    new BLZCoder(new[] { "-en", files[file] }, pBar1);
                    WinFormsUtil.Alert("已压缩!");
                    ExeFS.PackExeFS(Directory.GetFiles(ExeFSPath), sfd.FileName);
                    Interlocked.Decrement(ref threads);
                }).Start();
            }
        }

        private void B_Pickup_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            switch (Config.Generation)
            {
                case 6:
                    if (ExeFSPath != null) new PickupEditor6().Show();
                    break;
                case 7:
                    var pickup = Config.GetlzGARCData("pickup");
                    Invoke((Action)(() => new PickupEditor7(pickup).ShowDialog()));
                    break;
            }
        }

        private void B_TMHM_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            if (ExeFSPath == null)
                return;
            switch (Config.Generation)
            {
                case 6: new TMHMEditor6().Show(); break;
                case 7: new TMEditor7().Show(); break;
            }
        }

        private void B_Mart_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            switch (Config.Generation)
            {
                case 6:
                    if (ExeFSPath != null) new MartEditor6().Show();
                    break;

                case 7:
                    if (ThreadActive())
                        return;
                    if (DialogResult.Yes != WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "如果3DS没有打上RO补丁，编辑CRO文件可能导致崩溃", "Luma版本大于6，就无须担心", "是否仍要继续?"))
                        return;
                    if (RomFSPath != null) (Config.USUM ? new MartEditor7UU() : (Form)new MartEditor7()).Show();
                    break;
            }
        }

        private void B_MoveTutor_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            switch (Config.Generation)
            {
                case 6:
                    if (ExeFSPath != null) new TutorEditor6().Show();
                    break;
                case 7:
                    if (DialogResult.Yes != WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "如果3DS没有打上RO补丁，编辑CRO文件可能导致崩溃", "Luma版本大于6，就无须担心", "是否仍要继续?"))
                        return;
                    if (RomFSPath != null) new TutorEditor7().Show();
                    break;
            }
        }

        private void B_OPower_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            if (ExeFSPath != null) new OPower().Show();
        }

        private void B_ShinyRate_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            if (ExeFSPath != null) new ShinyRate().ShowDialog();
        }

        // CRO Subform Items
        private void PatchCRO_CRR(object sender, EventArgs e)
        {
            if (ThreadActive())
                return;
            if (RomFSPath == null)
                return;
            if (DialogResult.Yes != WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "如果你的3DS打了RO补丁，重建 CRO/CRR 不是必须的。", "是否继续?"))
                return;
            new Thread(() =>
            {
                Interlocked.Increment(ref threads);
                CRO.E_HashCRR(Path.Combine(RomFSPath, ".crr", "static.crr"), RomFSPath, true, /* true // don't patch crr for now */ false, RTB_Status, pBar1);
                Interlocked.Decrement(ref threads);

                WinFormsUtil.Alert("CRO's 与 CRR 已更新。",
                        "If you have made any modifications, it is required that the RSA Verification check be patched on the system in order for the modified CROs to load (ie, no file redirection like NTR's layeredFS).");
            }).Start();
        }

        private void B_Starter_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            if (DialogResult.Yes != WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "如果3DS没有打上RO补丁，编辑CRO文件可能导致崩溃", "Luma版本大于6，就无须担心", "是否仍要继续?"))
                return;
            string CRO = Path.Combine(RomFSPath, "DllPoke3Select.cro");
            string CRO2 = Path.Combine(RomFSPath, "DllField.cro");
            if (!File.Exists(CRO))
            {
                WinFormsUtil.Error("文件未找到!", "RomFS文件夹中未找到 DllPoke3Select.cro!");
                return;
            }
            if (!File.Exists(CRO2))
            {
                WinFormsUtil.Error("文件未找到!", "RomFS文件夹中未找到 DllField.cro!");
                return;
            }
            new StarterEditor6().ShowDialog();
        }

        private void B_TypeChart_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;

            switch (Config.Generation)
            {
                case 6:
                    if (DialogResult.Yes != WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "如果3DS没有打上RO补丁，编辑CRO文件可能导致崩溃", "Luma版本大于6，就无须担心", "是否仍要继续?"))
                        return;
                    string CRO = Path.Combine(RomFSPath, "DllBattle.cro");
                    if (!File.Exists(CRO))
                    {
                        WinFormsUtil.Error("文件未找到!", "RomFS文件夹中未找到 DllBattle.cro!");
                        return;
                    }
                    new TypeChart6().ShowDialog();
                    break;
                case 7:
                    new TypeChart7().ShowDialog();
                    break;
            }
        }

        private void B_Gift_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;
            if (DialogResult.Yes != WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "如果3DS没有打上RO补丁，编辑CRO文件可能导致崩溃", "Luma版本大于6，就无须担心", "是否仍要继续?"))
                return;
            string CRO = Path.Combine(RomFSPath, "DllField.cro");
            if (!File.Exists(CRO))
            {
                WinFormsUtil.Error("文件未找到!", "RomFS文件夹中未找到 DllField.cro!");
                return;
            }
            new GiftEditor6().ShowDialog();
        }

        private void B_Static_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            if (ThreadActive())
                return;

            if (Config.Generation == 7)
            {
                new Thread(() =>
                {
                    var esg = Config.GetGARCData("encounterstatic");
                    byte[][] es = esg.Files;

                    Invoke((Action)(() => new StaticEncounterEditor7(es).ShowDialog()));
                    esg.Files = es;
                    esg.Save();
                }).Start();
                return;
            }

            if (DialogResult.Yes != WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "如果3DS没有打上RO补丁，编辑CRO文件可能导致崩溃", "Luma版本大于6，就无须担心", "是否仍要继续?"))
                return;
            string CRO = Path.Combine(RomFSPath, "DllField.cro");
            if (!File.Exists(CRO))
            {
                WinFormsUtil.Error("文件未找到!", "RomFS文件夹中未找到 DllField.cro!");
                return;
            }
            new StaticEncounterEditor6().ShowDialog();
        }

        // CXI Building
        private void B_RebuildTrimmed3DS_Click(object sender, EventArgs e)
        {
            if (ThreadActive())
                return;

            SaveFileDialog sfd = new SaveFileDialog
            {
                FileName = "newROM.3ds",
                Filter = "Binary File|*.*"
            };
            if (sfd.ShowDialog() != DialogResult.OK)
                return;
            string path = sfd.FileName;

            new Thread(() =>
            {
                Interlocked.Increment(ref threads);
                Exheader exh = new Exheader(ExHeaderPath);
                CTRUtil.BuildROM(true, "Nintendo", ExeFSPath, RomFSPath, ExHeaderPath, exh.GetSerial(), path,
                    true, pBar1, RTB_Status);
                Interlocked.Decrement(ref threads);
            }).Start();
        }

        // 3DS Building
        private void B_Rebuild3DS_Click(object sender, EventArgs e)
        {
            if (ThreadActive())
                return;

            SaveFileDialog sfd = new SaveFileDialog
            {
                FileName = "newROM.3ds",
                Filter = "Binary File|*.*"
            };
            if (sfd.ShowDialog() != DialogResult.OK)
                return;
            string path = sfd.FileName;

            new Thread(() =>
            {
                Interlocked.Increment(ref threads);
                Exheader exh = new Exheader(ExHeaderPath);
                CTRUtil.BuildROM(true, "Nintendo", ExeFSPath, RomFSPath, ExHeaderPath, exh.GetSerial(), path,
                    false, pBar1, RTB_Status);
                Interlocked.Decrement(ref threads);
            }).Start();
        }

        // Extra Tools
        private void L_SubTools_Click(object sender, EventArgs e)
        {
            new ToolsUI().ShowDialog();
        }

        private void B_Patch_Click(object sender, EventArgs e)
        {
            new Patch().ShowDialog();
        }

        private void Menu_BLZ_Click(object sender, EventArgs e)
        {
            var ofd = new OpenFileDialog();
            if (DialogResult.OK != ofd.ShowDialog())
                return;

            string path = ofd.FileName;
            FileInfo fi = new FileInfo(path);
            if (fi.Length > 15 * 1024 * 1024) // 15MB
            { WinFormsUtil.Error("文件过大!", fi.Length + " 字节."); return; }

            if (ModifierKeys != Keys.Control && fi.Length % 0x200 == 0 && WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "检测到已解压的bin文件.", "是否压缩? 文件将会被替换.") == DialogResult.Yes)
                new Thread(() => { Interlocked.Increment(ref threads); new BLZCoder(new[] { "-en", path }, pBar1); Interlocked.Decrement(ref threads); WinFormsUtil.Alert("已压缩!"); }).Start();
            else if (WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "检测到已压缩的bin文件", "是否解压? 文件将会被替换.") == DialogResult.Yes)
                new Thread(() => { Interlocked.Increment(ref threads); new BLZCoder(new[] { "-d", path }, pBar1); Interlocked.Decrement(ref threads); WinFormsUtil.Alert("已解压!"); }).Start();
        }

        private void Menu_LZ11_Click(object sender, EventArgs e)
        {
            var ofd = new OpenFileDialog();
            if (DialogResult.OK != ofd.ShowDialog())
                return;

            string path = ofd.FileName;
            FileInfo fi = new FileInfo(path);
            if (fi.Length > 15*1024*1024) // 15MB
            { WinFormsUtil.Error("文件过大!", fi.Length + " 字节."); return; }

            byte[] data = File.ReadAllBytes(path);
            string predict = data[0] == 0x11 ? "已压缩" : "已解压";
            var dr = WinFormsUtil.Prompt(MessageBoxButtons.YesNoCancel, $"检测到 {predict} 文件，请选择执行的动作。",
                "是 = 解压\n否 = 压缩\n取消 = 中止");
            new Thread(() =>
            {
                Interlocked.Increment(ref threads);
                if (dr == DialogResult.Yes)
                {
                    try
                    {
                        LZSS.Decompress(path, Path.Combine(Directory.GetParent(path).FullName, "dec_" + Path.GetFileNameWithoutExtension(path) + ".bin"));
                    } catch (Exception err) { WinFormsUtil.Alert("以尝试解压, 可能成功:", err.ToString()); }
                    WinFormsUtil.Alert("文件已解压缩!", path);
                }
                if (dr == DialogResult.No)
                {
                    LZSS.Compress(path, Path.Combine(Directory.GetParent(path).FullName, Path.GetFileNameWithoutExtension(path).Replace("_dec", "") + ".lz"));
                    WinFormsUtil.Alert("文件已压缩!", path);
                }
                Interlocked.Decrement(ref threads);
            }).Start();
        }

        private void Menu_SMDH_Click(object sender, EventArgs e)
        {
            if (RomFSPath == null)
            {
                WinFormsUtil.Alert("请先打开一个游戏目录！");
                return;
            }
            new Icon().ShowDialog();
        }

        private void Menu_Shuffler_Click(object sender, EventArgs e)
        {
            new Shuffler().ShowDialog();
        }

        // GARC Requests
        internal static string GetGARCFileName(string requestedGARC, int lang)
        {
            var garc = Config.GetGARCReference(requestedGARC);
            if (garc.LanguageVariant)
                garc = garc.GetRelativeGARC(lang);

            return garc.Reference;
        }

        private bool GetGARC(string infile, string outfolder, bool PB, bool bypassExt = false)
        {
            if (skipBoth && Directory.Exists(outfolder))
            {
                UpdateStatus("跳过 - 文件已存在!", false);
                Interlocked.Decrement(ref threads);
                return true;
            }
            try
            {
                bool success = GarcUtil.UnpackGARC(infile, outfolder, bypassExt, PB ? pBar1 : null, L_Status, true);
                UpdateStatus(string.Format(success ? "成功!" : "失败!"), false);
                Interlocked.Decrement(ref threads);
                return success;
            }
            catch (Exception e) { WinFormsUtil.Error("无法获取 GARC:", e.ToString()); Interlocked.Decrement(ref threads); return false; }
        }

        private bool SetGARC(string outfile, string infolder, int padBytes, bool PB)
        {
            if (skipBoth || (ModifierKeys == Keys.Control && WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "是否取消回写数据至 GARC?") == DialogResult.Yes))
            { Interlocked.Decrement(ref threads); UpdateStatus("中止!", false); return false; }

            try
            {
                bool success = GarcUtil.PackGARC(infolder, outfile, Config.GARCVersion, padBytes, PB ? pBar1 : null, L_Status, true);
                Interlocked.Decrement(ref threads);
                UpdateStatus(string.Format(success ? "成功!" : "失败!"), false);
                return success;
            }
            catch (Exception e) { WinFormsUtil.Error("无法写入 GARC:", e.ToString()); Interlocked.Decrement(ref threads); return false; }
        }

        private void ThreadGet(string infile, string outfolder, bool PB = true, bool bypassExt = false)
        {
            Interlocked.Increment(ref threads);
            if (Directory.Exists(outfolder))
            {
                try { Directory.Delete(outfolder, true); }
                catch { }
            }

            new Thread(() => GetGARC(infile, outfolder, PB, bypassExt)).Start();
        }

        private void ThreadSet(string outfile, string infolder, int padBytes, bool PB = true)
        {
            Interlocked.Increment(ref threads);
            new Thread(() => SetGARC(outfile, infolder, padBytes, PB)).Start();
        }

        // Update RichTextBox
        private void UpdateStatus(string status, bool preBreak = true)
        {
            string newtext = (preBreak ? Environment.NewLine : "") + status;
            try
            {
                if (RTB_Status.InvokeRequired)
                {
                    RTB_Status.Invoke((MethodInvoker)delegate
                    {
                        RTB_Status.AppendText(newtext);
                        RTB_Status.SelectionStart = RTB_Status.Text.Length;
                        RTB_Status.ScrollToCaret();
                        L_Status.Text = RTB_Status.Lines.Last().Split(new[] {" @"}, StringSplitOptions.None)[0];
                    });
                }
                else
                {
                    RTB_Status.AppendText(newtext);
                    RTB_Status.SelectionStart = RTB_Status.Text.Length;
                    RTB_Status.ScrollToCaret();
                    L_Status.Text = RTB_Status.Lines.Last().Split(new[] { " @" }, StringSplitOptions.None)[0];
                }
            }
            catch { }
        }

        private void ResetStatus()
        {
            try
            {
                if (L_Status.InvokeRequired)
                {
                    L_Status.Invoke((MethodInvoker)(() => L_Status.Text = ""));
                }
                else
                {
                    L_Status.Text = "";
                }
            }
            catch { }
        }

        private void SetInt32SeedToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (DialogResult.Yes != WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "重置 RNG?", "如果是, 在点击确定前复制 32位 (非16进制) 整数种子至剪切板"))
                return;

            string val = string.Empty;
            try { val = Clipboard.GetText(); }
            catch { }
            if (int.TryParse(val, out int seed))
            {
                Util.ReseedRand(seed);
                WinFormsUtil.Alert($"重置 RNG 为种子: {seed}");
                return;
            }
            WinFormsUtil.Alert("无法设置种子");
        }

        static string extraSettingsPath = "extraSettings.txt";
        static List<string> settingsList = new List<string> { };

        private async void ReadExtraSettings()
        {
            if (!File.Exists(extraSettingsPath))
            {
                using (StreamWriter writer = new StreamWriter(extraSettingsPath))
                {
                    // 创建一个空白的文件
                }
            }

            // 读取源文件
            var inputStream = new StreamReader(extraSettingsPath, Encoding.UTF8);
            var input = await inputStream.ReadToEndAsync();
            inputStream.Close();

            // 按行分割
            string[] inputString = input.Split('\r');

            // 去除空行和制表符
            foreach (var line in inputString)
            {
                if (line != "")
                {
                    if (line.Contains('\t'))
                    {
                        settingsList.Add(line.Trim('\t'));
                    }
                    else
                    {
                        settingsList.Add(line);
                    }
                }
            }

            // 读取具体设置
            if (settingsList.Count == 0)
            {
                settingsList.Add("ifFixChineseDisplay: false");
            }
            else
            {
                foreach (var line in settingsList)
                {
                    if (line.Contains("ifFixChineseDisplay"))
                    {
                        line.Replace(": ", ":");
                        string[] temp = line.Split(':');
                        if (temp[1].Contains("true"))
                        {
                            ifFixChineseDisplay = true;
                            TSMIFixChineseDisplay.Checked = true;
                        }
                        else
                        {
                            ifFixChineseDisplay = false;
                            TSMIFixChineseDisplay.Checked = false;
                        }
                    }
                }
            }
        }

        private async void SaveExtraSettings()
        {
            for (int i = 0; i < settingsList.Count; i++)
            {
                if (settingsList[i].Contains("ifFixChineseDisplay"))
                {
                    settingsList[i].Replace(": ", ":");
                    string[] temp = settingsList[i].Split(':');
                    if (ifFixChineseDisplay)
                    {
                        temp[1] = "true";
                    }
                    else
                    {
                        temp[1] = "false";
                    }

                    settingsList[0] = temp[0] + ": " + temp[1];
                }
            }

            using (StreamWriter writer = new StreamWriter(extraSettingsPath))
            {
                await writer.WriteLineAsync(string.Join("", settingsList));
            }
        }

        private void Main_Load(object sender, EventArgs e)
        {
            ReadExtraSettings();
        }

        private void TSMIFixChineseDisplay_Click(object sender, EventArgs e)
        {
            if (TSMIFixChineseDisplay.Checked)
            {
                ifFixChineseDisplay = false;
                TSMIFixChineseDisplay.Checked = false;
            } else
            {
                ifFixChineseDisplay = true;
                TSMIFixChineseDisplay.Checked = true;
                MessageBox.Show("目前仅支持\"究极日月\"。", "注意", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        // 更新检查
        private async Task CheckForUpdate()
        {
            string url = "https://github.com/Brzjomo/pk3DS-zh_CN/releases";

            int currentBuild = Int16.Parse(OfficialBuild);
            int currentVersion = Int16.Parse(Version);
            int latestBuild = 0;
            int latestVersion = 0;

            int[] versions = await GetLatestVersion(url);
            latestBuild = versions[0];
            latestVersion = versions[1];

            latestVersions = versions;

            if (latestBuild == 0 && latestVersion == 0)
            {
                versionCheckFailed = true;
            } else
            {
                if (latestBuild > currentBuild || (latestBuild == currentBuild) && (latestVersion > currentVersion))
                {
                    if (DialogResult.Yes == WinFormsUtil.Prompt(MessageBoxButtons.YesNo, "发现新版本: " + latestBuild + "." + latestVersion, "有新版本可用，是否打开下载地址？"))
                    {
                        // Open Url
                        OpenUrlInDefaultBrowser(url);
                    }

                    ifUpToDate = false;
                }
                else
                {
                    ifUpToDate = true;
                }
            }

            ifVersionChecked = true;

            // 更新标题栏
            UpdateProgramTitle();
        }

        private async Task<int[]> GetLatestVersion(string url)
        {
            int build = 0;
            int version = 0;

            HttpClient client = new HttpClient();
            string html = "";

            try { 
                html = await client.GetStringAsync(url);

                HtmlDocument doc = new HtmlDocument();
                doc.LoadHtml(html);

                var titleNodes = doc.DocumentNode.SelectNodes("//a[@class='Link--primary Link']");
                if (titleNodes != null && titleNodes.Count > 0)
                {
                    string latestVersion = titleNodes[0].InnerText.Trim();

                    try
                    {
                        build = Int16.Parse(latestVersion.Split('.')[0]);
                        version = Int16.Parse(latestVersion.Split('.')[1]);
                    }
                    catch
                    {
                        WinFormsUtil.Alert("版本获取错误，请手动确认。");
                    }
                }
            } catch
            {
                WinFormsUtil.Alert("无法检查更新，请确认网络连接。");
            }

            return new int[] { build, version };
        }

        private void OpenUrlInDefaultBrowser(string url)
        {
            try
            {
                Process.Start(url);
            }
            catch (Exception ex)
            {
                WinFormsUtil.Alert("无法打开浏览器: " + ex.Message);
            }
        }
    }
}